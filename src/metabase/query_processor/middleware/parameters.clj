(ns metabase.query-processor.middleware.parameters
  "Middleware for substituting parameters in queries."
  (:require
   [clojure.data :as data]
   [clojure.set :as set]
   [medley.core :as m]
   [metabase.lib.core :as lib]
   [metabase.lib.schema :as lib.schema]
   [metabase.lib.schema.id :as lib.schema.id]
   [metabase.lib.util :as lib.util]
   [metabase.lib.walk :as lib.walk]
   [metabase.query-processor.middleware.parameters.mbql :as qp.mbql]
   [metabase.query-processor.middleware.parameters.native :as qp.native]
   [metabase.util :as u]
   [metabase.util.log :as log]
   [metabase.util.malli :as mu]))

(mu/defn- copy-previous-stage-native-filters :- ::lib.schema/stage
  "Native stages aren't allowed to have `:filter` clauses, generated by the [[expand-mbql-params]] function below. Move
  the filter clause into the next stage, if needed."
  [query :- ::lib.schema/query
   path  :- ::lib.walk/path
   stage :- ::lib.schema/stage]
  (let [previous-path  (conj (vec (butlast path)) (dec (last path)))
        previous-stage (get-in query previous-path)]
    (if-let [native-filters (seq (::native-filters previous-stage))]
      (update stage :filters (fn [existing]
                               (let [new-filters (filter some? (concat existing native-filters))]
                                 (if (= (count new-filters) 1)
                                   (first new-filters)
                                   (apply lib/and new-filters)))))
      stage)))

(mu/defn- expand-mbql-params :- ::lib.schema/stage
  [query                :- ::lib.schema/query
   path                 :- ::lib.walk/path
   {:keys [parameters]} :- ::lib.schema/stage]
  (let [stage' (lib.walk/apply-f-for-stage-at-path
                (fn [query stage-number]
                  (-> (qp.mbql/expand query stage-number parameters)
                      (lib.util/query-stage stage-number)))
                query path)]
    (cond-> stage'
      ;; native stages aren't allowed to have `:filters`, so if we just added them rename them to `::filters` and then
      ;; in the next stage we'll copy them over.
      (= (:lib/type stage') :mbql.stage/native) (set/rename-keys {:filters ::native-filters}))))

(mu/defn- expand-stage :- ::lib.schema/stage
  "Expand `:parameters` in one stage map that contains them."
  [query :- ::lib.schema/query
   path  :- ::lib.walk/path
   stage :- ::lib.schema/stage]
  (let [expanded (if (= (:lib/type stage) :mbql.stage/mbql)
                   (expand-mbql-params query path stage)
                   (qp.native/expand-stage query stage))]
    (dissoc expanded :parameters :template-tags)))

(mu/defn- expand-all :- ::lib.schema/query
  "Expand all `:parameters` anywhere in the query."
  [query :- ::lib.schema/query]
  (-> query
      (lib.walk/walk-stages (fn [query path stage]
                              (-> stage
                                  (cond->> ((some-fn :parameters :template-tags) stage) (expand-stage query path))
                                  (->> (copy-previous-stage-native-filters query path)))))))

(mu/defn- move-top-level-params-to-stage :- ::lib.schema/query
  "Move any top-level parameters to the same level (i.e., 'inner query') as the query they affect."
  [{:keys [info parameters], :as query} :- ::lib.schema/query]
  (cond-> (set/rename-keys query {:parameters :user-parameters})
    ;; TODO: Native models should be within scope of dashboard filters, by applying the filter on an outer stage.
    ;; That doesn't work, so the logic below requires MBQL queries only to fix the regression.
    ;; Native models don't actual get filtered even when linked to dashboard filters, but that's not a regression.
    ;; This can be fixed properly once this middleware is powered by MLv2. See #40011.
    (and (seq parameters)
         (:metadata/model-metadata info)
         (not (lib/native-stage? (lib/query-stage query -1))))
    lib/append-stage

    (seq parameters) (lib/update-query-stage -1 assoc :parameters parameters)))

(defn- expand-parameters
  "Expand parameters in the `outer-query`, and if the query is using a native source query, expand params in that as
  well."
  [outer-query]
  (let [pivot-original-query (get-in outer-query [:info :pivot/original-query])]
    (cond-> outer-query
      pivot-original-query (m/dissoc-in [:info :pivot/original-query])
      true                 move-top-level-params-to-stage
      true                 expand-all
      pivot-original-query (assoc-in [:info :pivot/original-query] pivot-original-query))))

(mu/defn- substitute-parameters* :- :map
  "If any parameters were supplied then substitute them into the query."
  [query]
  (u/prog1 (expand-parameters query)
    (when (not= <> query)
      (when-let [diff (second (data/diff query <>))]
        (log/tracef "\n\nSubstituted params:\n%s\n" (u/pprint-to-str 'cyan diff))))))

(mu/defn- assoc-database-id-in-snippet-tag
  [database-id :- ::lib.schema.id/database
   template-tags]
  (update-vals
   template-tags
   (fn [v]
     (cond-> v
       (= (:type v) :snippet) (assoc :database database-id)))))

(mu/defn- hoist-database-for-snippet-tags :- ::lib.schema/query
  "Assocs the `:database` ID from `query` in all snippet template tags."
  [query :- ::lib.schema/query]
  (u/update-in-if-exists query [:native :template-tags] (partial assoc-database-id-in-snippet-tag (:database query))))

(mu/defn substitute-parameters :- ::lib.schema/query
  "Substitute Dashboard or Card-supplied parameters in a query, replacing the param placeholers with appropriate values
  and/or modifiying the query as appropriate. This looks for maps that have the key `:parameters` and/or
  `:template-tags` and removes those keys, splicing appropriate conditions into the queries they affect.

  A SQL query with a param like `{{param}}` will have that part of the query replaced with an appropriate snippet as
  well as any prepared statement args needed. MBQL queries will have additional filter clauses added. (Or in a special
  case, the temporal bucketing on a breakout altered by a `:temporal-unit` parameter.)"
  [query :- ::lib.schema/query]
  (-> query
      hoist-database-for-snippet-tags
      substitute-parameters*))
