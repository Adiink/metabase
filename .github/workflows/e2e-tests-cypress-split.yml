name: E2E Tests (Cypress Split, Single Shared Backend)

on:
  push:
    branches:
      - "master"
      - "release-**"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  e2e-tests-split:
    name: e2e-tests-split
    runs-on: ubuntu-22.04

    # 1) We define a Metabase "service," so we only spin up Metabase once.
    #    All Cypress specs are split on this single container / single job.
    services:
      metabase:
        # In practice, you'd build/pull your Metabase Docker image here:
        image: metabase/metabase:latest
        # by default, runs on port 3000
        ports:
          - 4000:3000
        options: >-
          --health-cmd="curl --fail http://localhost:3000/api/health || exit 1"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=20

    steps:
      # ----------------------------------------------------------------
      # 1) Check out code & build jar (if you haven't already)
      #    Or you can download your built uberjar artifact if done in a prior job.
      # ----------------------------------------------------------------
      - name: Check out code
        uses: actions/checkout@v4

      - name: Prepare environment (Node, Yarn, etc.)
        uses: ./.github/actions/prepare-frontend
        # For example, might set node-version, etc.

      # If needed, retrieve the uberjar from a prior "build" job
      # - name: Retrieve uberjar artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: metabase-oss-<sha>-uberjar

      # If you want to do something with the jar, extract version.properties, etc.
      # - name: Get version info
      #   run: |
      #     jar xf target/uberjar/metabase.jar version.properties
      #     mv version.properties resources/

      # ----------------------------------------------------------------
      # 2) Wait for the Metabase "service" to come up healthy
      #    (The container is started automatically by the "services:" block)
      # ----------------------------------------------------------------
      - name: Wait for Metabase to be healthy
        run: |
          echo "Waiting for Metabase container to pass healthcheck..."
          # optional: we can wait up to 2 minutes, or just rely on the service health
          sleep 10

      # ----------------------------------------------------------------
      # 3) Install Cypress environment (if not installed in container)
      # ----------------------------------------------------------------
      - name: Prepare Cypress environment
        id: cypress-prep
        uses: ./.github/actions/prepare-cypress

      # ----------------------------------------------------------------
      # 4) cypress-split in a single job
      #    We'll run 4 splits in sequence, each partial set of specs.
      #    This uses cypress-split-run's built-in approach for multi-runs.
      # ----------------------------------------------------------------
      - name: Install cypress-split (if not installed yet)
        run: yarn add --dev cypress-split

      - name: Run cypress-split - multiple runs
        run: |
          # Tells cypress-split to do 4 runs in a single machine
          export SPLIT=10
          # "cypress-split-run" runs all splits in sequence on this single container
          npx cypress-split-run \
            --command "yarn run test-cypress-run --browser ${{ steps.cypress-prep.outputs.chrome-path }}"

        env:
          # cypress-split environment
          CYPRESS_CI: true
          CYPRESS_BASE_URL: http://localhost:3000
          MB_SNOWPLOW_AVAILABLE: true
          MB_SNOWPLOW_URL: "http://localhost:9090"

      # ----------------------------------------------------------------
      # 5) Upload results / artifacts
      # ----------------------------------------------------------------
      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit
          output-name: cypress-split
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

      - name: Upload Cypress Artifacts (on failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-split-artifacts
          path: |
            ./cypress
            ./logs/test.log
          if-no-files-found: ignore
