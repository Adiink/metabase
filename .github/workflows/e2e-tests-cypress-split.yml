name: E2E Tests (Cypress Split with Full Setup)

on:
  push:
    branches:
      - "master"
      - "release-**"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  files-changed:
    name: Check which files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    outputs:
      e2e_all: ${{ steps.changes.outputs.e2e_all }}
    steps:
      - uses: actions/checkout@v4
      - name: Test which files changed
        uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-paths.yaml

  e2e-matrix-builder:
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.e2e-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
      - name: Generate matrix for E2E tests
        id: e2e-matrix
        uses: ./.github/actions/build-e2e-matrix

  get-build-requirements:
    if: |
      !cancelled() &&
      contains(github.ref, 'release-x')
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      java_version: ${{ fromJson(steps.dependencies.outputs.result).java_version }}
      node_version: ${{ fromJson(steps.dependencies.outputs.result).node_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get build dependencies
        uses: actions/github-script@v7
        id: dependencies
        with:
          script: | # js
            const { getBuildRequirements, getVersionFromReleaseBranch } = require('${{ github.workspace }}/release/dist/index.cjs');

            const version = getVersionFromReleaseBranch('${{ github.ref }}');
            const requirements = getBuildRequirements(version);

            return {
              java_version: requirements.java,
              node_version: requirements.node,
            };

  build:
    needs: [files-changed, e2e-matrix-builder, get-build-requirements]
    if: |
      !cancelled() &&
      github.event.pull_request.draft == false &&
      needs.e2e-matrix-builder.result == 'success' &&
      needs.files-changed.outputs.e2e_all == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    strategy:
      matrix:
        edition: [oss, ee]
    env:
      MB_EDITION: ${{ matrix.edition }}
      INTERACTIVE: false
      # make sure that builds on release branches get licenses, because we use them for releases
      SKIP_LICENSES: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4

      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
        with:
          node-version: "${{ needs.get-build-requirements.outputs.node_version }}"

      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: uberjar
          java-version: "${{ needs.get-build-requirements.outputs.java_version || 11 }}"

      - name: Build uberjar with ./bin/build.sh
        run: ./bin/build.sh

      - name: Prepare uberjar artifact
        uses: ./.github/actions/prepare-uberjar-artifact
        with:
          name: metabase-${{ matrix.edition }}-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

  # Main test job - Key differences from e2e-tests.yml:
  # 1. Test Execution Strategy:
  #    - Original: Uses tags (@OSS, @slow, @flaky) to run different test subsets
  #    - Split: Uses SPLIT/SPLIT_INDEX to divide ALL tests across multiple runners
  # 2. Database Configuration:
  #    - Original: Relies on implicit port mapping and configuration
  #    - Split: Makes ports and database config explicit for better maintainability
  e2e-tests-split:
    needs: [build, e2e-matrix-builder, get-build-requirements]
    if: |
      !cancelled() && needs.build.result == 'success'
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 45
    name: e2e-tests-${{ matrix.name }}-${{ matrix.edition }}
    env:
      MB_EDITION: ${{ matrix.edition }}
      DISPLAY: ""
      QA_DB_ENABLED: true
      CYPRESS_ALL_FEATURES_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
      CYPRESS_NO_FEATURES_TOKEN: ${{ secrets.E2E_STARTER_TOKEN }}
      CYPRESS_PULL_REQUEST_ID: ${{ github.event.pull_request.number || '' }}
      COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title || github.event.head_commit.message || github.event.head_sha }}
      MB_SNOWPLOW_AVAILABLE: true
      MB_SNOWPLOW_URL: "http://localhost:9090"
      TZ: US/Pacific
      CYPRESS_CI: true
      E2E_HOST: "http://localhost:3000"
      # Parallelization: These vars tell Cypress how to parallelize the test suite
      SPLIT: ${{ strategy.job-total }}
      SPLIT_INDEX: ${{ matrix.containers }}
      # Database config: Making ports explicit for better maintainability
      PG_INTERNAL_PORT: 5432
      PG_PORT: 5404
      PG_DB_NAME: sample

    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.e2e-matrix-builder.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Prepare Docker containers
        uses: ./.github/actions/e2e-prepare-containers
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          maildev: true
          openldap: ${{ startsWith(matrix.name, 'admin') }}
          postgres: ${{ matrix.name != 'mongo'}}
          mysql: ${{ matrix.name != 'mongo'}}
          mongo: ${{ matrix.name == 'mongo'}}
          webhook: true

      - name: Retrieve uberjar artifact for ${{ matrix.edition }}
        uses: actions/download-artifact@v4
        with:
          name: metabase-${{ matrix.edition }}-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

      - name: Get the version info
        run: |
          jar xf target/uberjar/metabase.jar version.properties
          mv version.properties resources/

      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend

      - name: Prepare JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java-version }}
          distribution: "temurin"

      - name: Prepare Cypress environment
        id: cypress-prep
        uses: ./.github/actions/prepare-cypress

      - name: Run Snowplow micro
        uses: ./.github/actions/run-snowplow-micro

      # Create a separate database for tests that need to write data
      # Previously this was happening implicitly, now we make it explicit for better debugging
      - name: Create writable test database
        run: |
          docker exec $(docker ps -q -f "ancestor=metabase/qa-databases:postgres-sample-12") psql -U metabase -d $PG_DB_NAME -p $PG_INTERNAL_PORT -c "CREATE DATABASE writable_db"

      # Start Metabase with explicit database configuration
      # The health check ensures Metabase is fully ready before tests start
      # Previously these connection details were implicit/hardcoded
      - name: Run Metabase in the background
        run: |
          MB_DB_TYPE=postgres \
          MB_DB_HOST=localhost \
          MB_DB_PORT=$PG_PORT \
          MB_DB_DBNAME=$PG_DB_NAME \
          MB_DB_USER=metabase \
          MB_DB_PASS=metasample123 \
          MB_ENABLE_TEST_ENDPOINTS=true \
          java -jar ./target/uberjar/metabase.jar &
          while ! curl -s "$E2E_HOST/api/health" | grep '{"status":"ok"}'; do
            sleep 1
          done

      # Run tests that generate snapshots for visual regression testing
      # These create snapshot files that other tests will use for comparison
      - name: Generate snapshot files
        run: |
          yarn test-cypress-run \
          --spec "e2e/snapshot-creators/**/*.js" \
          --config-file e2e/support/cypress-snapshots.config.js \
          --browser ${{ steps.cypress-prep.outputs.chrome-path }}

      # Required for embedding tests, previously hidden in test setup
      # Only runs for embedding-specific test suites
      - name: Run Embedding SDK Storybook
        if: matrix.context == 'embedding-sdk' && github.event_name != 'schedule'
        uses: ./.github/actions/run-embedding-sdk-storybook

      - name: Run split Cypress tests
        run: |
          yarn test-cypress-run \
          --config-file e2e/support/cypress.config.js \
          --browser ${{ steps.cypress-prep.outputs.chrome-path }}

      - name: Upload test results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit
          output-name: cypress-split-${{ matrix.containers }}
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

      - name: Upload Cypress artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-split-artifacts-${{ matrix.containers }}
          path: |
            ./cypress
            ./logs/test.log
          if-no-files-found: ignore

      - name: Publish Summary
        if: failure()
        uses: actions/github-script@v7
        with:
          script: | #js
            const {
               parseReport,
               formatSummary
             } = require("./.github/scripts/handle-mochawesome-report.js");

             const report = parseReport();
             const summary = formatSummary(report);

             await core.summary.addRaw(summary).write();

  e2e-tests-skipped-stub:
    needs: [e2e-tests-split, e2e-matrix-builder]
    if: |
      !cancelled() &&
      needs.e2e-tests-split.result == 'skipped'
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 5
    name: e2e-tests-${{ matrix.name }}-${{ matrix.edition }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.e2e-matrix-builder.outputs.matrix) }}
    steps:
      - run: |
          echo "Didn't run due to conditional filtering"

  pr-env:
    needs: [build]
    if: |
      !cancelled() &&
      contains(github.event.pull_request.labels.*.name, 'PR-Env')
    uses: ./.github/workflows/pr-env.yml
    secrets: inherit
