name: Release 1b - Auto Patch
run-name: Patch Release ${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Major Metabase version (e.g. 45, 52, 68)'
        type: number
        required: true
  schedule:
    - cron: '15 0 * * 2-6' # every weekday at 7/8:15 pm Eastern Time

jobs:
  auto_patch_trigger:
    name: Auto Patch Trigger
    # don't run this workflow on a cron for forks
    if: ${{ github.event_name != 'schedule' || github.repository == 'metabase/metabase' }}
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    outputs:
      BUILD_MATRIX: ${{ steps.auto_patch_matrix.outputs.BUILD_MATRIX }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: yarn --cwd release --frozen-lockfile && yarn --cwd release build
      - name: Generate auto patch matrix
        uses: actions/github-script@v7
        id: auto_patch_matrix
        with:
          script: | # js
            const {
              getLatestGreenCommit,
              getNextPatchVersion,
              hasCommitBeenReleased,
            } = require('${{ github.workspace }}/release/dist/index.cjs');

            const currentRelease = Number('${{ vars.CURRENT_VERSION }}');
            const lastRelease = currentRelease - 1;
            const AUTO_RELEASE_VERSIONS = [lastRelease, currentRelease];

            async function releasePatchFor(majorVersion) {
              const nextPatch = await getNextPatchVersion({
                github,
                owner: context.repo.owner,
                repo: context.repo.repo,
                majorVersion,
              });

              const goodCommit = await getLatestGreenCommit({
                github,
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: `release-x.${majorVersion}.x`,
              });

              const hasBeenReleased = await hasCommitBeenReleased({
                github,
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: goodCommit,
                majorVersion: Number(majorVersion),
              });

              const buildMatrix = [];

              if (nextPatch && goodCommit && !hasBeenReleased) {

                // let's make this a real testable function that returns an array
                const releaseChannel = majorVersion === currentRelease
                  ? 'nightly'
                  : 'none';

                return ({
                  version: nextPatch,
                  commit: goodCommit,
                  releaseChannel,
                });

              } else {
                console.log(
                  { nextPatch, goodCommit, hasBeenReleased }
                );
                console.error(`No new patch version or no green commit found for v${majorVersion}`);
              }

              return null;
            }

            const buildMatrix = [];

            if (context.eventName === 'workflow_dispatch') {
              const inputVersion = Number(context.payload.inputs.version);

              if (typeof inputVersion !== 'number') {
                console.log('Invalid version number', inputVersion);
                throw new Error(`Invalid version number: ${inputVersion}`);
              }

              const buildInfo = await releasePatchFor(inputVersion);

              if (buildInfo) {
                buildMatrix.push(buildInfo);
              }
            } else { // scheduled release of AUTO_RELEASE_VERSIONS
              const results = await Promise.all(AUTO_RELEASE_VERSIONS.map(releasePatchFor));
              buildMatrix.push(...results.filter(Boolean));
            }

            console.log({ buildMatrix });

            core.setOutput('BUILD_MATRIX', JSON.stringify(buildMatrix));

  build-patch:
    needs: auto_patch_trigger
    uses: ./.github/workflows/tag-for-release.yml
    strategy:
      matrix:
        build_info: ${{ fromJson(needs.auto_patch_trigger.outputs.BUILD_MATRIX) }}
    with:
      version: ${{ matrix.build_info.version }}
      commit: ${{ matrix.build_info.commit }}

  publish-patch:
    uses: ./.github/workflows/release.yml
    needs: [auto_patch_trigger, build-patch]
    strategy:
      matrix:
        build_info: ${{ fromJson(needs.auto_patch_trigger.outputs.BUILD_MATRIX) }}
    with:
      version: ${{ matrix.build_info.version }}
      commit: ${{ matrix.build_info.commit }}
      release-channel: ${{ matrix.build_info.releaseChannel }}
