name: E2E Sample Apps compatibility with Embedding SDK testing

on:
  push:
    branches:
      - "master"
      - "release-**"
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - "master"
      - "release-**"
      # TODO: remove it before merge
      - "emb-96-**"

env:
  # we must support last two stable releases
  SUPPORTED_RELEASES_COUNT: 2

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  files-changed:
    name: Check which files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    outputs:
      e2e_all: ${{ steps.changes.outputs.e2e_all }}
    steps:
      - uses: actions/checkout@v4
      - name: Test which files changed
        uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-paths.yaml

  # if this is a test on a release branch, we need to check the build requirements
  get-build-requirements:
    if: |
      !cancelled() &&
      contains(github.base_ref || github.ref, 'release-x')
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      java_version: ${{ fromJson(steps.dependencies.outputs.result).java_version }}
      node_version: ${{ fromJson(steps.dependencies.outputs.result).node_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: release
      - name: Prepare build scripts
        run: cd ${{ github.workspace }}/release && yarn && yarn build
      - name: Get build dependencies
        uses: actions/github-script@v7
        id: dependencies
        with:
          script: | # js
            const {
              getBuildRequirements,
              getVersionFromReleaseBranch,
            } = require('${{ github.workspace }}/release/dist/index.cjs');
            const targetBranchName = '${{ github.base_ref || github.ref }}';

            const version = getVersionFromReleaseBranch(targetBranchName);
            const requirements = getBuildRequirements(version);

            return {
              java_version: requirements.java,
              node_version: requirements.node,
            };

  get-sample-app-compatibility-data:
    if: |
      !cancelled()
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    outputs:
      exclude_sample_app_names: ${{ fromJson(steps.build-sample-app-compatibility-data.outputs.result).exclude_sample_app_names }}
      sample_app_branch_name: ${{ fromJson(steps.build-sample-app-compatibility-data.outputs.result).sample_app_branch_name }}
      should_maintain_compatibility: ${{ fromJson(steps.build-sample-app-compatibility-data.outputs.result).should_maintain_compatibility }}
    steps:
      - uses: actions/checkout@v4
      - name: Build sample app compatibility data
        uses: actions/github-script@v7
        id: build-sample-app-compatibility-data
        with:
          script: | # js
            const ref = process.env.GITHUB_BASE_REF || process.env.GITHUB_REF || "";
            const branchName = ref.replace(/^refs\/heads\//, "");

            const isMainBranchRef = branchName === 'master';
            const isReleaseBranchRef = branchName.includes('release-x');

            console.log(ref, branchName, isMainBranchRef, isReleaseBranchRef);

            if (!isMainBranchRef && !isReleaseBranchRef) {
              return {
                sample_app_branch_name: '',
                should_maintain_compatibility: false,
              };
            }

            if (isMainBranchRef) {
              return {
                sample_app_branch_name: 'main',
                should_maintain_compatibility: true,
              };
            }

            if (isReleaseBranchRef) {
              const currentLatestVersion = Number(${{ vars.CURRENT_VERSION }});
              const versionRegexp = /release-x\.([0-9]+)\.x/;

              const versionMatch = branchName.match(versionRegexp);
              const currentBranchVersion = versionMatch ? versionMatch[1] : null;

              const supportedReleasesCount = Number(${{env.SUPPORTED_RELEASES_COUNT}});

              const shouldMaintainCompatibility = (currentLatestVersion - currentBranchVersion) <= (supportedReleasesCount - 1);

              console.log(currentLatestVersion, currentBranchVersion, shouldMaintainCompatibility);

              return {
                exclude_sample_app_names: 'shoppy',
                sample_app_branch_name: branchName,
                should_maintain_compatibility: shouldMaintainCompatibility,
              };
            }

  build:
    needs: [files-changed, get-build-requirements, get-sample-app-compatibility-data]
    if: |
      !cancelled() &&
      github.event.pull_request.draft == false &&
      needs.files-changed.outputs.e2e_all == 'true' &&
      needs.get-sample-app-compatibility-data.outputs.should_maintain_compatibility == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    env:
      MB_EDITION: ee
      INTERACTIVE: false
      # make sure that builds on release branches get licenses, because we use them for releases
      SKIP_LICENSES: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
        with:
          node-version: "${{ needs.get-build-requirements.outputs.node_version }}"
      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: uberjar
          java-version: "${{ needs.get-build-requirements.outputs.java_version || 21 }}"

      - name: Build uberjar with ./bin/build.sh
        run: ./bin/build.sh

      - name: Prepare uberjar artifact
        uses: ./.github/actions/prepare-uberjar-artifact
        with:
          name: metabase-ee-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

  reset-e2e-test-comment:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Remove test results comment
        uses: actions/github-script@v7
        with:
          script: | # js
            const { owner, repo } = context.repo;

            const { data: comments } = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: context.issue.number,
            }).catch(console.error);

            if (!comments) {
              return;
            }

            const comment = comments.find((comment) => comment.body.includes('## sample-apps-embedding-sdk-e2e failed on '));

            if (comment) {
              await github.rest.issues.deleteComment({
                owner,
                repo,
                comment_id: comment.id,
              });
            }

  e2e-tests:
    needs: [get-build-requirements, get-sample-app-compatibility-data, build]
    if: |
      !cancelled() && needs.build.result == 'success'
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    name: e2e-sample-apps-embedding-sdk-tests
    env:
      MB_EDITION: ee
      DISPLAY: ""
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PR_NUMBER: ${{ github.event.pull_request.number || '' }}
      HASH: ${{ github.event.pull_request.head.sha || github.sha }}-${{ github.run_attempt }}
      # Any env starting with `CYPRESS_` will be available to all Cypress tests via `Cypress.env()`
      # Example: you can get `CYPRESS_FOO` with `Cypress.env("FOO")`
      CYPRESS_ALL_FEATURES_TOKEN: ${{ secrets.ENTERPRISE_TOKEN }}
      CYPRESS_NO_FEATURES_TOKEN: ${{ secrets.E2E_STARTER_TOKEN }}
      CYPRESS_PULL_REQUEST_ID: ${{ github.event.pull_request.number || '' }}
      CYPRESS_IS_EMBEDDING_SDK: true
      CYPRESS_SHOPPY_METABASE_JWT_SHARED_SECRET: ${{ secrets.SHOPPY_METABASE_JWT_SHARED_SECRET }}
      CYPRESS_SHOPPY_DB_URL: ${{ secrets.SHOPPY_DB_URL }}
      COMMIT_INFO_MESSAGE: ${{ github.event.pull_request.title || github.event.head_commit.message || github.event.head.sha }}
      TZ: US/Pacific # to make node match the instance tz
      CYPRESS_CI: true
      # Sample Apps testing variables
      EXCLUDE_SAMPLE_APP_NAMES: ${{ needs.get-sample-app-compatibility-data.outputs.exclude_sample_app_names }}
      SAMPLE_APP_BRANCH_NAME: ${{ needs.get-sample-app-compatibility-data.outputs.sample_app_branch_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Retrieve uberjar artifact for ee
        uses: actions/download-artifact@v4
        with:
          name: metabase-ee-${{ github.event.pull_request.head.sha || github.sha }}-uberjar

      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend

      - name: Prepare JDK ${{ needs.get-build-requirements.outputs.java_version || 21 }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ needs.get-build-requirements.outputs.java_version || 21 }}
          distribution: "temurin"

      - name: Prepare Cypress environment
        id: cypress-prep
        uses: ./.github/actions/prepare-cypress

      - name: Prepare back-end environment
        uses: ./.github/actions/prepare-backend
        with:
          m2-cache-key: "cljs"

      - name: Compile CLJS
        run: yarn build-pure:cljs
        shell: bash

      - name: Build Embedding SDK package
        run: yarn build-embedding-sdk

      - name: Run Metabase
        run: node e2e/runner/run_cypress_ci.js start

      - name: Make app db snapshot
        run: node e2e/runner/run_cypress_ci.js snapshot --browser ${{ steps.cypress-prep.outputs.chrome-path }}

      - name: Prepare and launch Sample Apps
        run: npx tsx ./e2e/runner/run-sample-apps-for-embedding-sdk/run_ci.ts

      - name: Run e2e tests for Sample Apps compatibility with Embedding SDK
        id: run-e2e-tests
        continue-on-error: true
        run: node e2e/runner/run_cypress_ci.js sample-apps-embedding-sdk-e2e --browser ${{ steps.cypress-prep.outputs.chrome-path }}

      - name: Upload Test Results
        uses: ./.github/actions/upload-test-results
        if: always()
        with:
          input-path: ./target/junit
          output-name: e2e-sample-apps-embedding-sdk
          bucket: ${{ vars.AWS_S3_TEST_RESULTS_BUCKET }}
          aws-access-key-id: ${{ secrets.AWS_TEST_RESULTS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_TEST_RESULTS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
          trunk-api-token: ${{ secrets.TRUNK_API_TOKEN }}

      - name: Upload Cypress Artifacts upon failure
        uses: actions/upload-artifact@v4
        if: ${{ steps.run-e2e-tests.outcome != 'success' }}
        with:
          name: cypress-recording-sample-apps-embedding-sdk-latest
          path: |
            ./cypress
            ./logs/test.log
          if-no-files-found: ignore

      - name: Publish Summary
        if: ${{ steps.run-e2e-tests.outcome != 'success' }}
        uses: actions/github-script@v7
        with:
          script: | #js
            const {
               generateReport,
               parseReport,
               formatSummary
             } = require("./.github/scripts/handle-mochawesome-report.js");

             const report = await generateReport();
             const results = parseReport(report);
             const summary = formatSummary(results);

             await core.summary.addRaw(summary).write();

  e2e-tests-skipped-stub:
    needs: [e2e-tests]
    if: |
      !cancelled() &&
      needs.e2e-tests.result == 'skipped'
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    name: e2e-sample-apps-embedding-sdk-tests
    steps:
      - run: |
          echo "Didn't run due to conditional filtering"
