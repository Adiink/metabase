name: Embedding SDK

on:
  push:
    branches:
      - "master"
      - "release-**"
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  files-changed:
    name: Check which files changed
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    outputs:
      documentation: ${{ steps.changes.outputs.documentation }}
      frontend_embedding_sdk_sources: ${{ steps.changes.outputs.frontend_embedding_sdk_sources }}
    steps:
      - uses: actions/checkout@v4
      - name: Test which files changed
        uses: dorny/paths-filter@v3.0.0
        id: changes
        with:
          token: ${{ github.token }}
          filters: .github/file-paths.yaml

  build:
    needs: [files-changed]
    if: |
      !cancelled() &&
      (
        needs.files-changed.outputs.frontend_embedding_sdk_sources == 'true' ||
        needs.files-changed.outputs.documentation == 'true'
      )
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-embedding-sdk
        with:
          m2-cache-key: "embedding-sdk-build"
          artifact-name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}

  # Builds the target branch for a PR (base ref)
  build-base-ref:
    needs: [files-changed]
    if: |
      github.event_name == 'pull_request' &&
      !cancelled() &&
      needs.files-changed.outputs.frontend_embedding_sdk_sources == 'true'
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/build-embedding-sdk
        with:
          ref: ${{ github.base_ref }}
          m2-cache-key: "embedding-sdk-build-base-ref"
          artifact-name: embedding-sdk-${{ github.base_ref }}-${{ github.event.pull_request.head.sha || github.sha }}

  embedding-sdk-bundle-size-check:
    needs: [files-changed, build, build-base-ref]
    if: |
      needs.files-changed.outputs.frontend_embedding_sdk_sources == 'true' &&
      needs.build.result == 'success' &&
      needs.build-base-ref.result == 'success'
    runs-on: ubuntu-22.04
    timeout-minutes: 5
    env:
      MAX_BUNDLE_SIZE_DIFF_PERCENT: 5
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/sdk-bundle-size-check
        id: compare
        with:
          current-artifact-name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}
          current-dist-path: temp/embedding-sdk-current
          base-ref-artifact-name: embedding-sdk-${{ github.base_ref }}-${{ github.event.pull_request.head.sha || github.sha }}
          base-ref-dist-path: temp/embedding-sdk-base-ref
          max-bundle-size-diff-percent: ${{ env.MAX_BUNDLE_SIZE_DIFF_PERCENT }}

      - name: Comment on PR if bundle size has increased
        uses: ./.github/actions/notify-pull-request
        if: |
          success() &&
          steps.compare.outputs.size_increased == 'true'
        with:
          remove-previous-comment: true
          add-new-comment: true
          message: "‚ö†Ô∏è Embedding SDK bundle size increased by ${{ steps.compare.outputs.size_increase_percent }}% (limit: ${{ env.MAX_BUNDLE_SIZE_DIFF_PERCENT }}%)."
          include-log: false

  embedding-sdk-cli-snippets-type-check:
    needs: [files-changed, build]
    if: |
      needs.files-changed.outputs.frontend_embedding_sdk_sources == 'true' &&
      needs.build.result == 'success'
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Retrieve Embedding SDK dist artifact
        uses: actions/download-artifact@v4
        with:
          name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}
          path: ${{ github.workspace }}/resources/embedding-sdk
      - name: Run frontend embedding SDK snippets type check
        run: yarn run embedding-sdk:cli-snippets:type-check

  embedding-sdk-docs-snippets-type-check:
    needs: [files-changed, build]
    if: |
      needs.files-changed.outputs.documentation == 'true' &&
      needs.build.result == 'success'
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Retrieve Embedding SDK dist artifact
        uses: actions/download-artifact@v4
        with:
          name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}
          path: ${{ github.workspace }}/resources/embedding-sdk
      - name: Run frontend embedding SDK snippets type check
        run: yarn run embedding-sdk:docs-snippets:type-check

  embedding-sdk-api-documentation-generation-validation:
    needs: [files-changed, build]
    if: |
      needs.files-changed.outputs.frontend_embedding_sdk_sources == 'true' &&
      needs.build.result == 'success'
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Prepare front-end environment
        uses: ./.github/actions/prepare-frontend
      - name: Retrieve Embedding SDK dist artifact
        uses: actions/download-artifact@v4
        with:
          name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}
          path: ${{ github.workspace }}/resources/embedding-sdk
      - name: Generate documentation to check for generation errors
        id: docs-generation
        continue-on-error: true
        shell: bash
        run: |
          set -o pipefail
          yarn embedding-sdk:docs:generate:pure --emit none 2>&1 \
          | tee /dev/stdout \
          | tee >( tail -n 10 \
          | sed '1s/^/output<<EOF\n/' \
                   | sed '$aEOF' \
                   >> "$GITHUB_OUTPUT" )
          exit ${PIPESTATUS[0]}
      - name: Comment on PR if 'not included in the documentation' error happens
        uses: ./.github/actions/notify-pull-request
        with:
          remove-previous-comment: true
          add-new-comment: ${{ steps.docs-generation.outcome == 'failure' && contains(steps.docs-generation.outputs.output, 'not included in the documentation') }}
          message: "üìù Some exported from `@metabase/embedding-sdk-react` types reference other types that are not exported, i.e. internal types.<br><br>The internal type reference breaks API documentation generation for the SDK and also may unexpectedly increase the output size of the type declaration file.<br><br>Please check the CI logs to find the name of such type.<br><br>- If a type should be publicly available in the SDK, add a description to it or a TypeDoc annotation and export it from SDK.<br>- If a type is internal and should _not_ be publicly exposed, refactor types to prevent referencing other types that are not exported from SDK.<br><br>You can run `yarn embedding-sdk:docs:generate` locally to  verify that the issue has been resolved."
          include-log: true
      - name: Comment on PR if 'Failed to resolve link' error happens
        uses: ./.github/actions/notify-pull-request
        with:
          remove-previous-comment: true
          add-new-comment: ${{ steps.docs-generation.outcome == 'failure' && contains(steps.docs-generation.outputs.output, 'Failed to resolve link') }}
          message: "üìù A typedoc `{@link <TYPE_NAME>}` annotation is found that can't be resolved.<br><br>Most likely it happens when the referenced type is not exported. Please check the CI logs to find the name of such type.<br><br>- If a referenced in `{@link}` type should be publicly available in the SDK, add a description to it or a TypeDoc annotation and export it from SDK.<br>- If a type is internal and should _not_ be publicly exposed, change types to prevent unexported type reference in `{@link}` annotation.<br><br>You can run `yarn embedding-sdk:docs:generate` locally to verify that the issue has been resolved."
          include-log: true
      - name: Fail Job
        if: ${{ steps.docs-generation.outcome == 'failure' }}
        run: exit 1

  sdk-e2e-tests:
    uses: ./.github/workflows/e2e-component-tests-embedding-sdk.yml
    needs: [build]
    secrets: inherit
    with:
      cached-embedding-sdk-dist-artifact-name: embedding-sdk-${{ github.event.pull_request.head.sha || github.sha }}

  e2e-component-tests-embedding-sdk-cross-version:
    # run on: every push on release branches, and every pr that targets a release branch
    if: ${{ startsWith(github.ref, 'refs/heads/release-x.') || (github.event_name == 'pull_request' && startsWith(github.base_ref, 'release-x.')) }}
    uses: ./.github/workflows/e2e-component-tests-embedding-sdk-cross-version.yml
    secrets: inherit

  cross-version-for-breaking-changes:
    # run on: every pr that targets a release branch
    if: ${{ github.event_name == 'pull_request' && startsWith(github.base_ref, 'release-x.') }}
    uses: ./.github/workflows/e2e-cross-version-for-breaking-changes.yml
    secrets: inherit
    with:
      fe-ref: ${{ github.base_ref }}
      be-ref: ${{ github.head_ref }}

  embedding-sdk-tests-result:
    needs:
      - embedding-sdk-bundle-size-check
      - embedding-sdk-cli-snippets-type-check
      - embedding-sdk-docs-snippets-type-check
      - embedding-sdk-api-documentation-generation-validation
      - sdk-e2e-tests
      - e2e-component-tests-embedding-sdk-cross-version
    if: always() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      needs: ${{ toJson(needs) }}
    steps:
      - name: Check embedding SDK job status
        uses: actions/github-script@v7
        env:
          needs: ${{ toJson(needs) }}
        with:
          script: | # js
            const needs = JSON.parse(process.env.needs);
            const jobs = Object.entries(needs).map(
              ([jobName, jobValues]) => ({
                name: jobName,
                result: jobValues.result
              }));

            // are all jobs skipped or successful?
            if (jobs.every(job => (job.result === 'skipped' || job.result === 'success'))) {
              console.log('All jobs are skipped or successful');
              process.exit(0);
            }

            // otherwise, something failed
            console.log('Some embedding SDK jobs failed');
            jobs.forEach((job) => {
              if (job.result !== 'success') {
                console.log(`${job.name} - ${job.result}`);
              }
            });
            process.exit(1);
