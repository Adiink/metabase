---
description: Metabase Admin UI design patterns and styling conventions
globs:
  - "**/*.tsx"
  - "**/*.jsx"
---
<rule>
name: metabase_admin_ui_patterns
description: Standards for consistent UI design in Metabase admin interfaces

filters:
  # Apply to React component files
  - type: file_extension
    pattern: "\\.(jsx|tsx)$"
  # Apply to admin-related files
  - type: path
    pattern: ".*/admin/.*|.*/embedding_hub/.*"

You are designing UI for Metabase's admin interfaces. Follow these consistent patterns:

Core Card Component Pattern:
- Use Card components with `bg={color("bg-light")}` for background
- Add `withBorder` but use `shadow="none"` for flat design
- Add padding with `p="xl"` (24px)
- Add margin between cards with `mt="2rem"` (32px)
- Use border radius of 4-6px (default from Card component)

Section Headers:
- Use `<Title order={2} mb="xs">` for card titles
- Follow with explanatory text using `<Text mb="lg">`
- Use a `<Divider mb="xl" />` to separate the header from content

Responsive Layouts:
- Use `<Stack gap="lg">` or `<Stack gap="xl">` for vertical layouts
- Use `<Group justify="space-between">` for horizontal layouts with space between
- Use `<Group gap="sm">` for closely grouped horizontal items
- For forms with multiple columns, use `<Group grow>` with nested `<Stack>` elements

Form Elements:
- For cards with multiple settings:
  - Inputs should have labels and descriptions
  - Align related form fields using Group and Stack
  - Use consistent spacing with gap="md" or gap="lg"
  - Add proper spacing between sections with `<Space h="md" />` or `<Space h="xl" />`
- For cards with a single setting:
  - Use the card's title as the setting label
  - Use the card's description text to describe the setting
  - Place the input directly after the `<Divider>`
  - Do not repeat the label/description in the input component
  - Example:
    ```tsx
    <Card p="xl" bg={color("bg-light")} withBorder shadow="none">
      <Title order={2} mb="xs">{t`Map Tile Server`}</Title>
      <Text mb="lg">{t`Configure the map tile server used for rendering maps.`}</Text>
      <Divider mb="xl" />
      <TextInput placeholder="https://tile.openstreetmap.org/{z}/{x}/{y}.png" />
    </Card>
    ```

Toggle Settings Pattern:
- Use Group with justify="space-between" to place text on left, control on right
- Use Text with fw={600} for setting name
- Use smaller Text with c={color("text-medium")} for descriptions
- Use Switch component for toggle controls

List Display Pattern:
- Wrap each item in a Box with a border: `style={{ border: \`1px solid \${color("border")}\`, borderRadius: '4px' }}`
- Use p="md" or p="sm" padding within list items
- Use Group with justify="space-between" for content and actions
- Use color indicators for status (success, warning, error)
- Use Badge components for statuses

Search and Filter Pattern:
- Place search field on left, filters on right
- Use descriptive placeholders
- Show bulk actions under the search area
- Include pagination elements below the content

Button Standards:
- Primary actions: `<Button>Action</Button>`
- Secondary actions: `<Button variant="subtle">Action</Button>`
- Tertiary actions: `<Button variant="outline">Action</Button>`
- Danger actions: `<Button color={color("danger")}>Action</Button>`
- Right-align form submission buttons with `<Group justify="right" mt="xl">`

Danger Zone Pattern:
- Use title with c={color("danger")} for danger section headers
- Group destructive actions in a separate card at the bottom
- Use explicit warning text for each action
- Use red buttons for destructive actions
- NEVER include save buttons in danger zones - each action should be immediate and final
- Only include truly destructive actions that cannot be easily undone
- Each action must be uniquely destructive (not toggles or settings that could go elsewhere)
- Always show a confirmation dialog before executing the action
- Include clear, specific consequences in the description of each action
- Examples of appropriate danger zone actions:
  - Permanently delete data
  - Reset to factory defaults
  - Revoke all access tokens
  - Clear all caches
- Examples of inappropriate danger zone actions:
  - Toggle maintenance mode (not destructive)
  - Update configuration (use regular settings cards instead)
  - Disable features (use toggle patterns instead)
  - Any action that can be easily reversed

Color Usage:
- bg-light for card backgrounds
- border for borders (via withBorder or styled borders)
- text-medium for secondary text
- success for positive status indicators
- error/danger for negative status/destructive actions

Settings Grouping Guidelines:
- Group settings by functional relationship (e.g., general regional settings vs formatting settings)
- Keep card sections focused on a single conceptual area
- Limit each card to a maximum of 8 settings
- Use dividers between related sub-sections within a card
- Save buttons should only be used when there are multiple settings that work together as a group
  - Example: A form with multiple inputs that need to be saved together
  - Do not use save buttons for exclusive options or single toggles that can take effect immediately
  - When in doubt, consider if the settings need to be validated or saved as a group
- Multi-section cards should use headings with Text fw={600} mb="sm" for each section
- When used, save buttons should be right-aligned and placed at the bottom of each card

examples:
  # Example of proper card pattern
  - input: |
      // Bad: Inconsistent card styling
      <Card p="md" mt="md" shadow="sm">
        <Title>Card Title</Title>
        <Text>Description text</Text>
        <Divider />
        <Box>Content goes here</Box>
      </Card>

      // Good: Following the pattern
      <Card p="xl" mt="2rem" bg={color("bg-light")} withBorder shadow="none">
        <Title order={2} mb="xs">{t`Card Title`}</Title>
        <Text mb="lg">{t`Description text`}</Text>
        <Divider mb="xl" />
        <Box p="md">Content goes here</Box>
      </Card>
    output: "Correctly styled card following admin UI patterns"

  # Example of proper toggle pattern
  - input: |
      // Bad: Inconsistent toggle layout
      <Box>
        <Text>Enable Feature</Text>
        <Text size="sm">Feature description</Text>
        <Switch />
      </Box>

      // Good: Following the pattern
      <Group justify="space-between">
        <Box>
          <Text fw={600}>{t`Enable Feature`}</Text>
          <Text size="sm" c={color("text-medium")}>
            {t`Feature description text`}
          </Text>
        </Box>
        <Switch size="md" />
      </Group>
    output: "Correctly styled toggle following admin UI patterns"

  # Example of single setting pattern
  - input: |
      // Bad: Redundant label and description
      <Card p="xl" bg={color("bg-light")} withBorder shadow="none">
        <Title order={2} mb="xs">{t`Map Tile Server`}</Title>
        <Text mb="lg">{t`Configure the map tile server used for rendering maps.`}</Text>
        <Divider mb="xl" />
        <TextInput
          label={t`Map Tile Server`}
          description={t`Configure the map tile server used for rendering maps.`}
          placeholder="https://tile.openstreetmap.org/{z}/{x}/{y}.png"
        />
      </Card>

      // Good: Using card title and description
      <Card p="xl" bg={color("bg-light")} withBorder shadow="none">
        <Title order={2} mb="xs">{t`Map Tile Server`}</Title>
        <Text mb="lg">{t`Configure the map tile server used for rendering maps.`}</Text>
        <Divider mb="xl" />
        <TextInput placeholder="https://tile.openstreetmap.org/{z}/{x}/{y}.png" />
      </Card>
    output: "Correctly styled single setting following admin UI patterns"

  # Example of form layout
  - input: |
      // Bad: Poor form structure
      <Box>
        <TextInput label="Field 1" />
        <TextInput label="Field 2" />
        <Button>Submit</Button>
      </Box>

      // Good: Structured form layout
      <Stack gap="lg">
        <TextInput
          label={t`Field 1`}
          description={t`Description for field 1`}
          placeholder="Enter value"
        />
        <TextInput
          label={t`Field 2`}
          description={t`Description for field 2`}
          placeholder="Enter value"
        />
        <Group justify="right">
          <Button variant="subtle">{t`Cancel`}</Button>
          <Button>{t`Submit`}</Button>
        </Group>
      </Stack>
    output: "Correctly structured form following admin UI patterns"

  # Example of settings grouping
  - input: |
      // Bad: Too many unrelated settings in one card
      <Card p="xl" bg={color("bg-light")} withBorder shadow="none">
        <Title order={2} mb="xs">{t`Settings`}</Title>
        <Text mb="lg">{t`Configure various settings`}</Text>
        <Divider mb="xl" />
        <Stack gap="lg">
          <Select label={t`Language`} data={languages} />
          <TextInput label={t`Site Name`} />
          <NumberInput label={t`Query Timeout`} />
          <Select label={t`Date Format`} data={dateFormats} />
          <Switch label={t`Enable Analytics`} />
          <Select label={t`Currency`} data={currencies} />
          <ColorInput label={t`Theme Color`} />
          <Select label={t`Default Dashboard`} data={dashboards} />
          <Select label={t`Email Service`} data={emailServices} />
          <Group justify="right" mt="xl">
            <Button>{t`Save changes`}</Button>
          </Group>
        </Stack>
      </Card>

      // Good: Properly grouped settings in separate cards
      <Card p="xl" bg={color("bg-light")} withBorder shadow="none">
        <Title order={2} mb="xs">{t`General Settings`}</Title>
        <Text mb="lg">{t`Configure basic site settings`}</Text>
        <Divider mb="xl" />
        <Stack gap="lg">
          <TextInput label={t`Site Name`} />
          <Select label={t`Language`} data={languages} />
          <Switch label={t`Enable Analytics`} />
          <ColorInput label={t`Theme Color`} />
        </Stack>
        <Group justify="right" mt="xl">
          <Button>{t`Save changes`}</Button>
        </Group>
      </Card>

      <Card p="xl" mt="2rem" bg={color("bg-light")} withBorder shadow="none">
        <Title order={2} mb="xs">{t`Query Settings`}</Title>
        <Text mb="lg">{t`Configure how queries are executed`}</Text>
        <Divider mb="xl" />
        <Stack gap="lg">
          <NumberInput label={t`Query Timeout`} />
          <Select label={t`Default Dashboard`} data={dashboards} />
        </Stack>
        <Group justify="right" mt="xl">
          <Button>{t`Save changes`}</Button>
        </Group>
      </Card>

      <Card p="xl" mt="2rem" bg={color("bg-light")} withBorder shadow="none">
        <Title order={2} mb="xs">{t`Formatting Settings`}</Title>
        <Text mb="lg">{t`Configure date and currency formats`}</Text>
        <Divider mb="xl" />
        <Stack gap="xl">
          <Box>
            <Text fw={600} mb="sm">{t`Date Format`}</Text>
            <Select data={dateFormats} />
          </Box>
          <Divider />
          <Box>
            <Text fw={600} mb="sm">{t`Currency`}</Text>
            <Select data={currencies} />
          </Box>
        </Stack>
        <Group justify="right" mt="xl">
          <Button>{t`Save changes`}</Button>
        </Group>
      </Card>
    output: "Correctly grouped settings following admin UI patterns"

metadata:
  priority: high
  version: 1.0
</rule>
