/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCacheDeleteRequest from '../model/ApiCacheDeleteRequest';
import ApiCachePutRequest from '../model/ApiCachePutRequest';

/**
* ApiCache service.
* @module api/ApiCacheApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiCacheApi {

    /**
    * Constructs a new ApiCacheApi. 
    * @alias module:api/ApiCacheApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCacheDelete operation.
     * @callback module:api/ApiCacheApi~apiCacheDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/cache/
     * Delete cache configurations.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCacheDeleteRequest} [apiCacheDeleteRequest] 
     * @param {module:api/ApiCacheApi~apiCacheDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCacheDelete(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCacheDeleteRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/cache/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCacheGet operation.
     * @callback module:api/ApiCacheApi~apiCacheGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/cache/
     * Return cache configuration.
     * @param {Array.<module:model/String>} model Type of model
     * @param {Object} opts Optional parameters
     * @param {Number} [collection] Collection id to filter results. Returns everything if not supplied.
     * @param {Number} [id] Model id to get configuration for.
     * @param {module:api/ApiCacheApi~apiCacheGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCacheGet(model, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling apiCacheGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'model': this.apiClient.buildCollectionParam(model, 'multi'),
        'collection': opts['collection'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/cache/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCacheInvalidatePost operation.
     * @callback module:api/ApiCacheApi~apiCacheInvalidatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/cache/invalidate
     * Invalidate cache entries.    Use it like `/api/cache/invalidate?database=1&dashboard=15` (any number of database/dashboard/question can be   supplied).    `&include=overrides` controls whenever you want to invalidate cache for a specific cache configuration without   touching all nested configurations, or you want your invalidation to trickle down to every card.
     * @param {Object} opts Optional parameters
     * @param {Object} [include] All cache configuration overrides should invalidate cache too
     * @param {Array.<Number>} [database] A list of database ids
     * @param {Array.<Number>} [dashboard] A list of dashboard ids
     * @param {Array.<Number>} [question] A list of question ids
     * @param {module:api/ApiCacheApi~apiCacheInvalidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCacheInvalidatePost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include'],
        'database': this.apiClient.buildCollectionParam(opts['database'], 'multi'),
        'dashboard': this.apiClient.buildCollectionParam(opts['dashboard'], 'multi'),
        'question': this.apiClient.buildCollectionParam(opts['question'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/cache/invalidate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCachePut operation.
     * @callback module:api/ApiCacheApi~apiCachePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/cache/
     * Store cache configuration.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCachePutRequest} [apiCachePutRequest] 
     * @param {module:api/ApiCacheApi~apiCachePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCachePut(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCachePutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/cache/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
