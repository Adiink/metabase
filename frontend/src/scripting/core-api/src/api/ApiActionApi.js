/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiActionIdExecutePostRequest from '../model/ApiActionIdExecutePostRequest';
import ApiActionIdPutRequest from '../model/ApiActionIdPutRequest';
import ApiActionPostRequest from '../model/ApiActionPostRequest';

/**
* ApiAction service.
* @module api/ApiActionApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiActionApi {

    /**
    * Constructs a new ApiActionApi. 
    * @alias module:api/ApiActionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiActionActionIdDelete operation.
     * @callback module:api/ApiActionApi~apiActionActionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/action/{action-id}
     * Delete an Action.
     * @param {Number} actionId value must be an integer greater than zero.
     * @param {module:api/ApiActionApi~apiActionActionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionActionIdDelete(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling apiActionActionIdDelete");
      }

      let pathParams = {
        'action-id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/{action-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionActionIdExecuteGet operation.
     * @callback module:api/ApiActionApi~apiActionActionIdExecuteGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/action/{action-id}/execute
     * Fetches the values for filling in execution parameters. Pass PK parameters and values to select.
     * @param {Number} actionId value must be an integer greater than zero.
     * @param {String} parameters value must be a valid JSON string.
     * @param {module:api/ApiActionApi~apiActionActionIdExecuteGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionActionIdExecuteGet(actionId, parameters, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling apiActionActionIdExecuteGet");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling apiActionActionIdExecuteGet");
      }

      let pathParams = {
        'action-id': actionId
      };
      let queryParams = {
        'parameters': parameters
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/{action-id}/execute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionActionIdGet operation.
     * @callback module:api/ApiActionApi~apiActionActionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/action/{action-id}
     * Fetch an Action.
     * @param {Number} actionId value must be an integer greater than zero.
     * @param {module:api/ApiActionApi~apiActionActionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionActionIdGet(actionId, callback) {
      let postBody = null;
      // verify the required parameter 'actionId' is set
      if (actionId === undefined || actionId === null) {
        throw new Error("Missing the required parameter 'actionId' when calling apiActionActionIdGet");
      }

      let pathParams = {
        'action-id': actionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/{action-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionGet operation.
     * @callback module:api/ApiActionApi~apiActionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/action/
     * Returns actions that can be used for QueryActions. By default lists all viewable actions. Pass optional   `?model-id=<model-id>` to limit to actions on a particular model.
     * @param {Object} opts Optional parameters
     * @param {Number} [modelId] value must be an integer greater than zero.
     * @param {module:api/ApiActionApi~apiActionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'model-id': opts['modelId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionIdExecutePost operation.
     * @callback module:api/ApiActionApi~apiActionIdExecutePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/action/{id}/execute
     * Execute the Action.     `parameters` should be the mapped dashboard parameters with values.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiActionIdExecutePostRequest} [apiActionIdExecutePostRequest] 
     * @param {module:api/ApiActionApi~apiActionIdExecutePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionIdExecutePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiActionIdExecutePostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiActionIdExecutePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/{id}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionIdPublicLinkDelete operation.
     * @callback module:api/ApiActionApi~apiActionIdPublicLinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/action/{id}/public_link
     * Delete the publicly-accessible link to this Dashboard.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiActionApi~apiActionIdPublicLinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionIdPublicLinkDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiActionIdPublicLinkDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/{id}/public_link', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionIdPublicLinkPost operation.
     * @callback module:api/ApiActionApi~apiActionIdPublicLinkPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/action/{id}/public_link
     * Generate publicly-accessible links for this Action. Returns UUID to be used in public links. (If this   Action has already been shared, it will return the existing public link rather than creating a new one.) Public   sharing must be enabled.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiActionApi~apiActionIdPublicLinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionIdPublicLinkPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiActionIdPublicLinkPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/{id}/public_link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionIdPut operation.
     * @callback module:api/ApiActionApi~apiActionIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/action/{id}
     * Update an Action.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiActionIdPutRequest} [apiActionIdPutRequest] 
     * @param {module:api/ApiActionApi~apiActionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiActionIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiActionIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionPost operation.
     * @callback module:api/ApiActionApi~apiActionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/action/
     * Create a new action.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiActionPostRequest} [apiActionPostRequest] 
     * @param {module:api/ApiActionApi~apiActionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiActionPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiActionPublicGet operation.
     * @callback module:api/ApiActionApi~apiActionPublicGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/action/public
     * Fetch a list of Actions with public UUIDs. These actions are publicly-accessible *if* public sharing is enabled.
     * @param {module:api/ApiActionApi~apiActionPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiActionPublicGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/action/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
