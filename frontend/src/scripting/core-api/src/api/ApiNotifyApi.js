/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiNotifyDbAttachedDatawarehousePostRequest from '../model/ApiNotifyDbAttachedDatawarehousePostRequest';
import ApiNotifyDbIdNewTablePostRequest from '../model/ApiNotifyDbIdNewTablePostRequest';
import ApiNotifyDbIdPostRequest from '../model/ApiNotifyDbIdPostRequest';

/**
* ApiNotify service.
* @module api/ApiNotifyApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiNotifyApi {

    /**
    * Constructs a new ApiNotifyApi. 
    * @alias module:api/ApiNotifyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiNotifyDbAttachedDatawarehousePost operation.
     * @callback module:api/ApiNotifyApi~apiNotifyDbAttachedDatawarehousePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/notify/db/attached_datawarehouse
     * Sync the attached datawarehouse. Can provide in the body:   - table_name and schema_name: both strings. Will look for an existing table and sync it, otherwise will try to find a   new table with that name and sync it. If it cannot find a table it will throw an error. If table_name is empty or   blank, will sync the entire database.   - synchronous?: is a boolean value to indicate if this should block on the result.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiNotifyDbAttachedDatawarehousePostRequest} [apiNotifyDbAttachedDatawarehousePostRequest] 
     * @param {module:api/ApiNotifyApi~apiNotifyDbAttachedDatawarehousePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNotifyDbAttachedDatawarehousePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiNotifyDbAttachedDatawarehousePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/notify/db/attached_datawarehouse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotifyDbIdNewTablePost operation.
     * @callback module:api/ApiNotifyApi~apiNotifyDbIdNewTablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/notify/db/{id}/new-table
     * Sync a new table without running a full database sync. Requires `schema_name` and `table_name`. Will throw an error   if the table already exists in Metabase or cannot be found.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiNotifyDbIdNewTablePostRequest} [apiNotifyDbIdNewTablePostRequest] 
     * @param {module:api/ApiNotifyApi~apiNotifyDbIdNewTablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNotifyDbIdNewTablePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiNotifyDbIdNewTablePostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotifyDbIdNewTablePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/notify/db/{id}/new-table', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotifyDbIdPost operation.
     * @callback module:api/ApiNotifyApi~apiNotifyDbIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/notify/db/{id}
     * Notification about a potential schema change to one of our `Databases`.   Caller can optionally specify a `:table_id` or `:table_name` in the body to limit updates to a single   `Table`. Optional Parameter `:scan` can be `\"full\"` or `\"schema\"` for a full sync or a schema sync, available   regardless if a `:table_id` or `:table_name` is passed.   This endpoint is secured by an API key that needs to be passed as a `X-METABASE-APIKEY` header which needs to be defined in   the `MB_API_KEY` [environment variable](https://www.metabase.com/docs/latest/configuring-metabase/environment-variables.html#mb_api_key)
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiNotifyDbIdPostRequest} [apiNotifyDbIdPostRequest] 
     * @param {module:api/ApiNotifyApi~apiNotifyDbIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiNotifyDbIdPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiNotifyDbIdPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotifyDbIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/notify/db/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
