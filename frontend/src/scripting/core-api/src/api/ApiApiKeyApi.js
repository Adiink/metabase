/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiApiKeyIdPutRequest from '../model/ApiApiKeyIdPutRequest';
import ApiApiKeyPostRequest from '../model/ApiApiKeyPostRequest';

/**
* ApiApiKey service.
* @module api/ApiApiKeyApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiApiKeyApi {

    /**
    * Constructs a new ApiApiKeyApi. 
    * @alias module:api/ApiApiKeyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiApiKeyCountGet operation.
     * @callback module:api/ApiApiKeyApi~apiApiKeyCountGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/api-key/count
     * Get the count of API keys in the DB with the default scope.
     * @param {module:api/ApiApiKeyApi~apiApiKeyCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiApiKeyCountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/api-key/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiApiKeyGet operation.
     * @callback module:api/ApiApiKeyApi~apiApiKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/api-key/
     * Get a list of API keys with the default scope. Non-paginated.
     * @param {module:api/ApiApiKeyApi~apiApiKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiApiKeyGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/api-key/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiApiKeyIdDelete operation.
     * @callback module:api/ApiApiKeyApi~apiApiKeyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/api-key/{id}
     * Delete an ApiKey
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiApiKeyApi~apiApiKeyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiApiKeyIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiApiKeyIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/api-key/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiApiKeyIdPut operation.
     * @callback module:api/ApiApiKeyApi~apiApiKeyIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/api-key/{id}
     * Update an API key by changing its group and/or its name
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiApiKeyIdPutRequest} [apiApiKeyIdPutRequest] 
     * @param {module:api/ApiApiKeyApi~apiApiKeyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiApiKeyIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiApiKeyIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiApiKeyIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/api-key/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiApiKeyIdRegeneratePut operation.
     * @callback module:api/ApiApiKeyApi~apiApiKeyIdRegeneratePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/api-key/{id}/regenerate
     * Regenerate an API Key
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiApiKeyApi~apiApiKeyIdRegeneratePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiApiKeyIdRegeneratePut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiApiKeyIdRegeneratePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/api-key/{id}/regenerate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiApiKeyPost operation.
     * @callback module:api/ApiApiKeyApi~apiApiKeyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/api-key/
     * Create a new API key (and an associated `User`) with the provided name and group ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiApiKeyPostRequest} [apiApiKeyPostRequest] 
     * @param {module:api/ApiApiKeyApi~apiApiKeyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiApiKeyPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiApiKeyPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/api-key/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
