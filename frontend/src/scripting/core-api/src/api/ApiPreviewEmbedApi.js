/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ApiPreviewEmbed service.
* @module api/ApiPreviewEmbedApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiPreviewEmbedApi {

    /**
    * Constructs a new ApiPreviewEmbedApi. 
    * @alias module:api/ApiPreviewEmbedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPreviewEmbedCardTokenGet operation.
     * @callback module:api/ApiPreviewEmbedApi~apiPreviewEmbedCardTokenGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/preview_embed/card/{token}
     * Fetch a Card you're considering embedding by passing a JWT `token`.
     * @param {String} token value must be a non-blank string.
     * @param {module:api/ApiPreviewEmbedApi~apiPreviewEmbedCardTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPreviewEmbedCardTokenGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiPreviewEmbedCardTokenGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/preview_embed/card/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPreviewEmbedCardTokenQueryGet operation.
     * @callback module:api/ApiPreviewEmbedApi~apiPreviewEmbedCardTokenQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/preview_embed/card/{token}/query
     * Fetch the query results for a Card you're considering embedding by passing a JWT `token`.
     * @param {String} token value must be a non-blank string.
     * @param {module:api/ApiPreviewEmbedApi~apiPreviewEmbedCardTokenQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPreviewEmbedCardTokenQueryGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiPreviewEmbedCardTokenQueryGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/preview_embed/card/{token}/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdGet operation.
     * @callback module:api/ApiPreviewEmbedApi~apiPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/preview_embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}
     * Fetch the results of running a Card belonging to a Dashboard you're considering embedding with JWT `token`.
     * @param {String} token value must be a non-blank string.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiPreviewEmbedApi~apiPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdGet(token, dashcardId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPreviewEmbedDashboardTokenDashcardDashcardIdCardCardIdGet");
      }

      let pathParams = {
        'token': token,
        'dashcard-id': dashcardId,
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/preview_embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPreviewEmbedDashboardTokenGet operation.
     * @callback module:api/ApiPreviewEmbedApi~apiPreviewEmbedDashboardTokenGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/preview_embed/dashboard/{token}
     * Fetch a Dashboard you're considering embedding by passing a JWT `token`. 
     * @param {String} token value must be a non-blank string.
     * @param {module:api/ApiPreviewEmbedApi~apiPreviewEmbedDashboardTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPreviewEmbedDashboardTokenGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiPreviewEmbedDashboardTokenGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/preview_embed/dashboard/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPreviewEmbedDashboardTokenParamsParamKeyValuesGet operation.
     * @callback module:api/ApiPreviewEmbedApi~apiPreviewEmbedDashboardTokenParamsParamKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/preview_embed/dashboard/{token}/params/{param-key}/values
     * Embedded version of chain filter values endpoint.
     * @param {module:api/ApiPreviewEmbedApi~apiPreviewEmbedDashboardTokenParamsParamKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPreviewEmbedDashboardTokenParamsParamKeyValuesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/preview_embed/dashboard/{token}/params/{param-key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPreviewEmbedPivotCardTokenQueryGet operation.
     * @callback module:api/ApiPreviewEmbedApi~apiPreviewEmbedPivotCardTokenQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/preview_embed/pivot/card/{token}/query
     * Fetch the query results for a Card you're considering embedding by passing a JWT `token`.
     * @param {String} token value must be a non-blank string.
     * @param {module:api/ApiPreviewEmbedApi~apiPreviewEmbedPivotCardTokenQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPreviewEmbedPivotCardTokenQueryGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiPreviewEmbedPivotCardTokenQueryGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/preview_embed/pivot/card/{token}/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet operation.
     * @callback module:api/ApiPreviewEmbedApi~apiPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/preview_embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}
     * Fetch the results of running a Card belonging to a Dashboard you're considering embedding with JWT `token`.
     * @param {String} token value must be a non-blank string.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiPreviewEmbedApi~apiPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet(token, dashcardId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPreviewEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet");
      }

      let pathParams = {
        'token': token,
        'dashcard-id': dashcardId,
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/preview_embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
