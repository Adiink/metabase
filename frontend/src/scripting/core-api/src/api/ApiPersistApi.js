/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPersistSetRefreshSchedulePostRequest from '../model/ApiPersistSetRefreshSchedulePostRequest';

/**
* ApiPersist service.
* @module api/ApiPersistApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiPersistApi {

    /**
    * Constructs a new ApiPersistApi. 
    * @alias module:api/ApiPersistApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPersistCardCardIdGet operation.
     * @callback module:api/ApiPersistApi~apiPersistCardCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/persist/card/{card-id}
     * Fetch a particular [[PersistedInfo]] by card-id.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiPersistApi~apiPersistCardCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistCardCardIdGet(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPersistCardCardIdGet");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/card/{card-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistCardCardIdPersistPost operation.
     * @callback module:api/ApiPersistApi~apiPersistCardCardIdPersistPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/card/{card-id}/persist
     * Mark the model (card) as persisted. Runs the query and saves it to the database backing the card and hot swaps this   query in place of the model's query.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiPersistApi~apiPersistCardCardIdPersistPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistCardCardIdPersistPost(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPersistCardCardIdPersistPost");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/card/{card-id}/persist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistCardCardIdRefreshPost operation.
     * @callback module:api/ApiPersistApi~apiPersistCardCardIdRefreshPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/card/{card-id}/refresh
     * Refresh the persisted model caching `card-id`.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiPersistApi~apiPersistCardCardIdRefreshPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistCardCardIdRefreshPost(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPersistCardCardIdRefreshPost");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/card/{card-id}/refresh', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistCardCardIdUnpersistPost operation.
     * @callback module:api/ApiPersistApi~apiPersistCardCardIdUnpersistPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/card/{card-id}/unpersist
     * Unpersist this model. Deletes the persisted table backing the model and all queries after this will use the card's   query rather than the saved version of the query.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiPersistApi~apiPersistCardCardIdUnpersistPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistCardCardIdUnpersistPost(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPersistCardCardIdUnpersistPost");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/card/{card-id}/unpersist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistDatabaseIdPersistPost operation.
     * @callback module:api/ApiPersistApi~apiPersistDatabaseIdPersistPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/database/{id}/persist
     * Attempt to enable model persistence for a database. If already enabled returns a generic 204.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPersistApi~apiPersistDatabaseIdPersistPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistDatabaseIdPersistPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPersistDatabaseIdPersistPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/database/{id}/persist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistDatabaseIdUnpersistPost operation.
     * @callback module:api/ApiPersistApi~apiPersistDatabaseIdUnpersistPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/database/{id}/unpersist
     * Attempt to disable model persistence for a database. If already not enabled, just returns a generic 204.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPersistApi~apiPersistDatabaseIdUnpersistPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistDatabaseIdUnpersistPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPersistDatabaseIdUnpersistPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/database/{id}/unpersist', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistDisablePost operation.
     * @callback module:api/ApiPersistApi~apiPersistDisablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/disable
     * Disable global setting to allow databases to persist models. This will remove all tasks to refresh tables, remove   that option from databases which might have it enabled, and delete all cached tables.
     * @param {module:api/ApiPersistApi~apiPersistDisablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistDisablePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistEnablePost operation.
     * @callback module:api/ApiPersistApi~apiPersistEnablePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/enable
     * Enable global setting to allow databases to persist models.
     * @param {module:api/ApiPersistApi~apiPersistEnablePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistEnablePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistGet operation.
     * @callback module:api/ApiPersistApi~apiPersistGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/persist/
     * List the entries of [[PersistedInfo]] in order to show a status page.
     * @param {module:api/ApiPersistApi~apiPersistGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistPersistedInfoIdGet operation.
     * @callback module:api/ApiPersistApi~apiPersistPersistedInfoIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/persist/{persisted-info-id}
     * Fetch a particular [[PersistedInfo]] by id.
     * @param {Number} persistedInfoId value must be an integer greater than zero.
     * @param {module:api/ApiPersistApi~apiPersistPersistedInfoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistPersistedInfoIdGet(persistedInfoId, callback) {
      let postBody = null;
      // verify the required parameter 'persistedInfoId' is set
      if (persistedInfoId === undefined || persistedInfoId === null) {
        throw new Error("Missing the required parameter 'persistedInfoId' when calling apiPersistPersistedInfoIdGet");
      }

      let pathParams = {
        'persisted-info-id': persistedInfoId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/{persisted-info-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPersistSetRefreshSchedulePost operation.
     * @callback module:api/ApiPersistApi~apiPersistSetRefreshSchedulePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/persist/set-refresh-schedule
     * Set the cron schedule to refresh persisted models.    Shape should be JSON like {cron: \"0 30 1/8 * * ? *\"}.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPersistSetRefreshSchedulePostRequest} [apiPersistSetRefreshSchedulePostRequest] 
     * @param {module:api/ApiPersistApi~apiPersistSetRefreshSchedulePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPersistSetRefreshSchedulePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPersistSetRefreshSchedulePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/persist/set-refresh-schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
