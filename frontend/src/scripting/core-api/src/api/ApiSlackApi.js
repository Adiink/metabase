/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiSlackBugReportPostRequest from '../model/ApiSlackBugReportPostRequest';
import ApiSlackSettingsPutRequest from '../model/ApiSlackSettingsPutRequest';

/**
* ApiSlack service.
* @module api/ApiSlackApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiSlackApi {

    /**
    * Constructs a new ApiSlackApi. 
    * @alias module:api/ApiSlackApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSlackBugReportPost operation.
     * @callback module:api/ApiSlackApi~apiSlackBugReportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/slack/bug-report
     * Send diagnostic information to the configured Slack channels.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSlackBugReportPostRequest} [apiSlackBugReportPostRequest] 
     * @param {module:api/ApiSlackApi~apiSlackBugReportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSlackBugReportPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSlackBugReportPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/slack/bug-report', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSlackManifestGet operation.
     * @callback module:api/ApiSlackApi~apiSlackManifestGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/slack/manifest
     * Returns the YAML manifest file that should be used to bootstrap new Slack apps
     * @param {module:api/ApiSlackApi~apiSlackManifestGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSlackManifestGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/slack/manifest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSlackSettingsPut operation.
     * @callback module:api/ApiSlackApi~apiSlackSettingsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/slack/settings
     * Update Slack related settings. You must be a superuser to do this. Also updates the slack-cache.   There are 3 cases where we alter the slack channel/user cache:   1. falsy token           -> clear   2. invalid token         -> clear   3. truthy, valid token   -> refresh 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSlackSettingsPutRequest} [apiSlackSettingsPutRequest] 
     * @param {module:api/ApiSlackApi~apiSlackSettingsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSlackSettingsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSlackSettingsPutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/slack/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
