/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCardCardIdQueryExportFormatPostRequest from '../model/ApiCardCardIdQueryExportFormatPostRequest';
import ApiCardCardIdQueryPostRequest from '../model/ApiCardCardIdQueryPostRequest';
import ApiCardCollectionsPostRequest from '../model/ApiCardCollectionsPostRequest';
import ApiCardFromCsvPostRequestFile from '../model/ApiCardFromCsvPostRequestFile';
import ApiCardIdPutRequest from '../model/ApiCardIdPutRequest';
import ApiCardPivotCardIdQueryPostRequest from '../model/ApiCardPivotCardIdQueryPostRequest';
import ApiCardPostRequest from '../model/ApiCardPostRequest';

/**
* ApiCard service.
* @module api/ApiCardApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiCardApi {

    /**
    * Constructs a new ApiCardApi. 
    * @alias module:api/ApiCardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCardCardIdParamsParamKeySearchQueryGet operation.
     * @callback module:api/ApiCardApi~apiCardCardIdParamsParamKeySearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/{card-id}/params/{param-key}/search/{query}
     * Fetch possible values of the parameter whose ID is `:param-key` that contain `:query`.      ;; fetch values for Card 1 parameter 'abc' that contain 'Orange';      GET /api/card/1/params/abc/search/Orange    Currently limited to first 1000 results.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {String} paramKey value must be a non-blank string.
     * @param {String} query value must be a non-blank string.
     * @param {module:api/ApiCardApi~apiCardCardIdParamsParamKeySearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardCardIdParamsParamKeySearchQueryGet(cardId, paramKey, query, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiCardCardIdParamsParamKeySearchQueryGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiCardCardIdParamsParamKeySearchQueryGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling apiCardCardIdParamsParamKeySearchQueryGet");
      }

      let pathParams = {
        'card-id': cardId,
        'param-key': paramKey,
        'query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{card-id}/params/{param-key}/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardCardIdParamsParamKeyValuesGet operation.
     * @callback module:api/ApiCardApi~apiCardCardIdParamsParamKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/{card-id}/params/{param-key}/values
     * Fetch possible values of the parameter whose ID is `:param-key`.      ;; fetch values for Card 1 parameter 'abc' that are possible     GET /api/card/1/params/abc/values
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {String} paramKey value must be a non-blank string.
     * @param {module:api/ApiCardApi~apiCardCardIdParamsParamKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardCardIdParamsParamKeyValuesGet(cardId, paramKey, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiCardCardIdParamsParamKeyValuesGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiCardCardIdParamsParamKeyValuesGet");
      }

      let pathParams = {
        'card-id': cardId,
        'param-key': paramKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{card-id}/params/{param-key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardCardIdPublicLinkDelete operation.
     * @callback module:api/ApiCardApi~apiCardCardIdPublicLinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/card/{card-id}/public_link
     * Delete the publicly-accessible link to this Card.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiCardApi~apiCardCardIdPublicLinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardCardIdPublicLinkDelete(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiCardCardIdPublicLinkDelete");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{card-id}/public_link', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardCardIdPublicLinkPost operation.
     * @callback module:api/ApiCardApi~apiCardCardIdPublicLinkPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/{card-id}/public_link
     * Generate publicly-accessible links for this Card. Returns UUID to be used in public links. (If this Card has   already been shared, it will return the existing public link rather than creating a new one.)  Public sharing must   be enabled.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiCardApi~apiCardCardIdPublicLinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardCardIdPublicLinkPost(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiCardCardIdPublicLinkPost");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{card-id}/public_link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardCardIdQueryExportFormatPost operation.
     * @callback module:api/ApiCardApi~apiCardCardIdQueryExportFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/{card-id}/query/{export-format}
     * Run the query associated with a Card, and return its results as a file in the specified format.    `parameters` should be passed as query parameter encoded as a serialized JSON string (this is because this endpoint   is normally used to power 'Download Results' buttons that use HTML `form` actions).
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:model/String} exportFormat 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCardCardIdQueryExportFormatPostRequest} [apiCardCardIdQueryExportFormatPostRequest] 
     * @param {module:api/ApiCardApi~apiCardCardIdQueryExportFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardCardIdQueryExportFormatPost(cardId, exportFormat, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardCardIdQueryExportFormatPostRequest'];
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiCardCardIdQueryExportFormatPost");
      }
      // verify the required parameter 'exportFormat' is set
      if (exportFormat === undefined || exportFormat === null) {
        throw new Error("Missing the required parameter 'exportFormat' when calling apiCardCardIdQueryExportFormatPost");
      }

      let pathParams = {
        'card-id': cardId,
        'export-format': exportFormat
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{card-id}/query/{export-format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardCardIdQueryPost operation.
     * @callback module:api/ApiCardApi~apiCardCardIdQueryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/{card-id}/query
     * Run the query associated with a Card.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCardCardIdQueryPostRequest} [apiCardCardIdQueryPostRequest] 
     * @param {module:api/ApiCardApi~apiCardCardIdQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardCardIdQueryPost(cardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardCardIdQueryPostRequest'];
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiCardCardIdQueryPost");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{card-id}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardCollectionsPost operation.
     * @callback module:api/ApiCardApi~apiCardCollectionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/collections
     * Bulk update endpoint for Card Collections. Move a set of `Cards` with `card_ids` into a `Collection` with   `collection_id`, or remove them from any Collections by passing a `null` `collection_id`.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCardCollectionsPostRequest} [apiCardCollectionsPostRequest] 
     * @param {module:api/ApiCardApi~apiCardCollectionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardCollectionsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardCollectionsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardEmbeddableGet operation.
     * @callback module:api/ApiCardApi~apiCardEmbeddableGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/embeddable
     * Fetch a list of Cards where `enable_embedding` is `true`. The cards can be embedded using the embedding endpoints   and a signed JWT.
     * @param {module:api/ApiCardApi~apiCardEmbeddableGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardEmbeddableGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/embeddable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardFromCsvPost operation.
     * @callback module:api/ApiCardApi~apiCardFromCsvPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/from-csv
     * Create a table and model populated with the values from the attached CSV. Returns the model ID if successful.
     * @param {module:model/ApiCardFromCsvPostRequestFile} file 
     * @param {Object} opts Optional parameters
     * @param {Number} [collectionId] 
     * @param {module:api/ApiCardApi~apiCardFromCsvPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardFromCsvPost(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiCardFromCsvPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'collection_id': opts['collectionId'],
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/from-csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardGet operation.
     * @callback module:api/ApiCardApi~apiCardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/
     * Get all the Cards. Option filter param `f` can be used to change the set of Cards that are returned; default is   `all`, but other options include `mine`, `bookmarked`, `database`, `table`, `using_model`, `using_metric`,   `using_segment`, and `archived`. See corresponding implementation functions above for the specific behavior   of each filter option. :card_index:
     * @param {module:model/String} f 
     * @param {Object} opts Optional parameters
     * @param {Number} [modelId] value must be an integer greater than zero.
     * @param {module:api/ApiCardApi~apiCardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardGet(f, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'f' is set
      if (f === undefined || f === null) {
        throw new Error("Missing the required parameter 'f' when calling apiCardGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'f': f,
        'model_id': opts['modelId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardIdCopyPost operation.
     * @callback module:api/ApiCardApi~apiCardIdCopyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/{id}/copy
     * Copy a `Card`, with the new name 'Copy of _name_'
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiCardApi~apiCardIdCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardIdCopyPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCardIdCopyPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{id}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardIdDashboardsGet operation.
     * @callback module:api/ApiCardApi~apiCardIdDashboardsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/{id}/dashboards
     * Get a list of `{:name ... :id ...}` pairs for all the dashboards this card appears in.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiCardApi~apiCardIdDashboardsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardIdDashboardsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCardIdDashboardsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{id}/dashboards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardIdDelete operation.
     * @callback module:api/ApiCardApi~apiCardIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/card/{id}
     * Hard delete a Card. To soft delete, use `PUT /api/card/:id`
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiCardApi~apiCardIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCardIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardIdGet operation.
     * @callback module:api/ApiCardApi~apiCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/{id}
     * Get `Card` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [ignoreView] 
     * @param {module:model/String} [context] 
     * @param {module:api/ApiCardApi~apiCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCardIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'ignore_view': opts['ignoreView'],
        'context': opts['context']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardIdPut operation.
     * @callback module:api/ApiCardApi~apiCardIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/card/{id}
     * Update a `Card`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteOldDashcards] 
     * @param {module:model/ApiCardIdPutRequest} [apiCardIdPutRequest] 
     * @param {module:api/ApiCardApi~apiCardIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCardIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'delete_old_dashcards': opts['deleteOldDashcards']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardIdQueryMetadataGet operation.
     * @callback module:api/ApiCardApi~apiCardIdQueryMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/{id}/query_metadata
     * Get all of the required query metadata for a card.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiCardApi~apiCardIdQueryMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardIdQueryMetadataGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCardIdQueryMetadataGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{id}/query_metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardIdSeriesGet operation.
     * @callback module:api/ApiCardApi~apiCardIdSeriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/{id}/series
     * Fetches a list of compatible series with the card with id `card_id`.    - `last_cursor` with value is the id of the last card from the previous page to fetch the next page.   - `query` to search card by name.   - `exclude_ids` to filter out a list of card ids
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [lastCursor] value must be an integer greater than zero.
     * @param {String} [query] value must be a non-blank string.
     * @param {Object} [excludeIds] 
     * @param {module:api/ApiCardApi~apiCardIdSeriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardIdSeriesGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCardIdSeriesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'last_cursor': opts['lastCursor'],
        'query': opts['query'],
        'exclude_ids': opts['excludeIds']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/{id}/series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardPivotCardIdQueryPost operation.
     * @callback module:api/ApiCardApi~apiCardPivotCardIdQueryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/pivot/{card-id}/query
     * Run the query associated with a Card.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCardPivotCardIdQueryPostRequest} [apiCardPivotCardIdQueryPostRequest] 
     * @param {module:api/ApiCardApi~apiCardPivotCardIdQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardPivotCardIdQueryPost(cardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardPivotCardIdQueryPostRequest'];
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiCardPivotCardIdQueryPost");
      }

      let pathParams = {
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/pivot/{card-id}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardPost operation.
     * @callback module:api/ApiCardApi~apiCardPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/card/
     * Create a new `Card`. Card `type` can be `question`, `metric`, or `model`.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCardPostRequest} [apiCardPostRequest] 
     * @param {module:api/ApiCardApi~apiCardPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardPublicGet operation.
     * @callback module:api/ApiCardApi~apiCardPublicGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/card/public
     * Fetch a list of Cards with public UUIDs. These cards are publicly-accessible *if* public sharing is enabled.
     * @param {module:api/ApiCardApi~apiCardPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardPublicGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/card/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
