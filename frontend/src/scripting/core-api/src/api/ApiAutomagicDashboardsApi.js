/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter from '../model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter';

/**
* ApiAutomagicDashboards service.
* @module api/ApiAutomagicDashboardsApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiAutomagicDashboardsApi {

    /**
    * Constructs a new ApiAutomagicDashboardsApi. 
    * @alias module:api/ApiAutomagicDashboardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiAutomagicDashboardsDatabaseIdCandidatesGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsDatabaseIdCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/database/{id}/candidates
     * Return a list of candidates for automagic dashboards ordered by interestingness.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsDatabaseIdCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsDatabaseIdCandidatesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAutomagicDashboardsDatabaseIdCandidatesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/database/{id}/candidates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}
     * Return an automagic comparison dashboard for cell in automagic dashboard for entity `entity`    with id `id` defined by query `cell-query`; compared with entity `comparison-entity` with id    `comparison-entity-id-or-query.`.
     * @param {module:model/String} entity 
     * @param {String} entityIdOrQuery value must be a non-blank string.
     * @param {Object} cellQuery form-encoded base-64-encoded JSON
     * @param {module:model/String} comparisonEntity Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter} [show] invalid show value
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet(entity, entityIdOrQuery, cellQuery, comparisonEntity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'entityIdOrQuery' is set
      if (entityIdOrQuery === undefined || entityIdOrQuery === null) {
        throw new Error("Missing the required parameter 'entityIdOrQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'cellQuery' is set
      if (cellQuery === undefined || cellQuery === null) {
        throw new Error("Missing the required parameter 'cellQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'comparisonEntity' is set
      if (comparisonEntity === undefined || comparisonEntity === null) {
        throw new Error("Missing the required parameter 'comparisonEntity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }

      let pathParams = {
        'entity': entity,
        'entity-id-or-query': entityIdOrQuery,
        'cell-query': cellQuery,
        'comparison-entity': comparisonEntity
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}
     * Return an automagic dashboard analyzing cell in automagic dashboard for entity `entity` defined by query   `cell-query`.
     * @param {module:model/String} entity 
     * @param {String} entityIdOrQuery value must be a non-blank string.
     * @param {Object} cellQuery form-encoded base-64-encoded JSON
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter} [show] invalid show value
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet(entity, entityIdOrQuery, cellQuery, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet");
      }
      // verify the required parameter 'entityIdOrQuery' is set
      if (entityIdOrQuery === undefined || entityIdOrQuery === null) {
        throw new Error("Missing the required parameter 'entityIdOrQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet");
      }
      // verify the required parameter 'cellQuery' is set
      if (cellQuery === undefined || cellQuery === null) {
        throw new Error("Missing the required parameter 'cellQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet");
      }

      let pathParams = {
        'entity': entity,
        'entity-id-or-query': entityIdOrQuery,
        'cell-query': cellQuery
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}
     * Return an automagic comparison dashboard for cell in automagic dashboard for entity `entity`    with id `id` defined by query `cell-query` using dashboard-template `dashboard-template`; compared with entity    `comparison-entity` with id `comparison-entity-id-or-query.`.
     * @param {module:model/String} entity 
     * @param {String} entityIdOrQuery value must be a non-blank string.
     * @param {Object} prefix 
     * @param {Object} dashboardTemplate invalid value for dashboard template name
     * @param {Object} cellQuery form-encoded base-64-encoded JSON
     * @param {module:model/String} comparisonEntity Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter} [show] invalid show value
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet(entity, entityIdOrQuery, prefix, dashboardTemplate, cellQuery, comparisonEntity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'entityIdOrQuery' is set
      if (entityIdOrQuery === undefined || entityIdOrQuery === null) {
        throw new Error("Missing the required parameter 'entityIdOrQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'prefix' is set
      if (prefix === undefined || prefix === null) {
        throw new Error("Missing the required parameter 'prefix' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'dashboardTemplate' is set
      if (dashboardTemplate === undefined || dashboardTemplate === null) {
        throw new Error("Missing the required parameter 'dashboardTemplate' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'cellQuery' is set
      if (cellQuery === undefined || cellQuery === null) {
        throw new Error("Missing the required parameter 'cellQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'comparisonEntity' is set
      if (comparisonEntity === undefined || comparisonEntity === null) {
        throw new Error("Missing the required parameter 'comparisonEntity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }

      let pathParams = {
        'entity': entity,
        'entity-id-or-query': entityIdOrQuery,
        'prefix': prefix,
        'dashboard-template': dashboardTemplate,
        'cell-query': cellQuery,
        'comparison-entity': comparisonEntity
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}
     * Return an automagic dashboard analyzing cell in question with id `id` defined by query `cell-query` using   dashboard-template `dashboard-template`.
     * @param {module:model/String} entity 
     * @param {String} entityIdOrQuery value must be a non-blank string.
     * @param {Object} prefix 
     * @param {Object} dashboardTemplate invalid value for dashboard template name
     * @param {Object} cellQuery form-encoded base-64-encoded JSON
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter} [show] invalid show value
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet(entity, entityIdOrQuery, prefix, dashboardTemplate, cellQuery, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet");
      }
      // verify the required parameter 'entityIdOrQuery' is set
      if (entityIdOrQuery === undefined || entityIdOrQuery === null) {
        throw new Error("Missing the required parameter 'entityIdOrQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet");
      }
      // verify the required parameter 'prefix' is set
      if (prefix === undefined || prefix === null) {
        throw new Error("Missing the required parameter 'prefix' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet");
      }
      // verify the required parameter 'dashboardTemplate' is set
      if (dashboardTemplate === undefined || dashboardTemplate === null) {
        throw new Error("Missing the required parameter 'dashboardTemplate' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet");
      }
      // verify the required parameter 'cellQuery' is set
      if (cellQuery === undefined || cellQuery === null) {
        throw new Error("Missing the required parameter 'cellQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet");
      }

      let pathParams = {
        'entity': entity,
        'entity-id-or-query': entityIdOrQuery,
        'prefix': prefix,
        'dashboard-template': dashboardTemplate,
        'cell-query': cellQuery
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/cell/{cell-query}/rule/{prefix}/{dashboard-template}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}
     * Return an automagic comparison dashboard for entity `entity` with id `id` compared with entity `comparison-entity`   with id `comparison-entity-id-or-query.`
     * @param {String} entityIdOrQuery value must be a non-blank string.
     * @param {module:model/String} entity 
     * @param {module:model/String} comparisonEntity Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter} [show] invalid show value
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet(entityIdOrQuery, entity, comparisonEntity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityIdOrQuery' is set
      if (entityIdOrQuery === undefined || entityIdOrQuery === null) {
        throw new Error("Missing the required parameter 'entityIdOrQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'comparisonEntity' is set
      if (comparisonEntity === undefined || comparisonEntity === null) {
        throw new Error("Missing the required parameter 'comparisonEntity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }

      let pathParams = {
        'entity-id-or-query': entityIdOrQuery,
        'entity': entity,
        'comparison-entity': comparisonEntity
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/compare/{comparison-entity}/{comparison-entity-id-or-query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}
     * Return an automagic dashboard for entity `entity` with id `id`.
     * @param {module:model/String} entity 
     * @param {Object} opts Optional parameters
     * @param {Number} [show] 
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryGet(entity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryGet");
      }

      let pathParams = {
        'entity': entity
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/query_metadata
     * Return all metadata for an automagic dashboard for entity `entity` with id `id`.
     * @param {module:model/String} entity 
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGet(entity, callback) {
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGet");
      }

      let pathParams = {
        'entity': entity
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/query_metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}
     * Return an automagic comparison dashboard for entity `entity` with id `id` using dashboard-template   `dashboard-template`; compared with entity `comparison-entity` with id `comparison-entity-id-or-query.`.
     * @param {module:model/String} entity 
     * @param {String} entityIdOrQuery value must be a non-blank string.
     * @param {Object} prefix 
     * @param {Object} dashboardTemplate invalid value for dashboard template name
     * @param {module:model/String} comparisonEntity Invalid comparison entity type. Can only be one of \"table\", \"segment\", or \"adhoc\"
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter} [show] invalid show value
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet(entity, entityIdOrQuery, prefix, dashboardTemplate, comparisonEntity, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'entityIdOrQuery' is set
      if (entityIdOrQuery === undefined || entityIdOrQuery === null) {
        throw new Error("Missing the required parameter 'entityIdOrQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'prefix' is set
      if (prefix === undefined || prefix === null) {
        throw new Error("Missing the required parameter 'prefix' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'dashboardTemplate' is set
      if (dashboardTemplate === undefined || dashboardTemplate === null) {
        throw new Error("Missing the required parameter 'dashboardTemplate' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }
      // verify the required parameter 'comparisonEntity' is set
      if (comparisonEntity === undefined || comparisonEntity === null) {
        throw new Error("Missing the required parameter 'comparisonEntity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet");
      }

      let pathParams = {
        'entity': entity,
        'entity-id-or-query': entityIdOrQuery,
        'prefix': prefix,
        'dashboard-template': dashboardTemplate,
        'comparison-entity': comparisonEntity
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}/compare/{comparison-entity}/{comparison-entity-id-or-query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}
     * Return an automagic dashboard for entity `entity` with id `id` using dashboard-template `dashboard-template`.
     * @param {module:model/String} entity 
     * @param {String} entityIdOrQuery value must be a non-blank string.
     * @param {Object} prefix 
     * @param {Object} dashboardTemplate invalid value for dashboard template name
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGetShowParameter} [show] invalid show value
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet(entity, entityIdOrQuery, prefix, dashboardTemplate, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entity' is set
      if (entity === undefined || entity === null) {
        throw new Error("Missing the required parameter 'entity' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet");
      }
      // verify the required parameter 'entityIdOrQuery' is set
      if (entityIdOrQuery === undefined || entityIdOrQuery === null) {
        throw new Error("Missing the required parameter 'entityIdOrQuery' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet");
      }
      // verify the required parameter 'prefix' is set
      if (prefix === undefined || prefix === null) {
        throw new Error("Missing the required parameter 'prefix' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet");
      }
      // verify the required parameter 'dashboardTemplate' is set
      if (dashboardTemplate === undefined || dashboardTemplate === null) {
        throw new Error("Missing the required parameter 'dashboardTemplate' when calling apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet");
      }

      let pathParams = {
        'entity': entity,
        'entity-id-or-query': entityIdOrQuery,
        'prefix': prefix,
        'dashboard-template': dashboardTemplate
      };
      let queryParams = {
        'show': opts['show']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/{entity}/{entity-id-or-query}/rule/{prefix}/{dashboard-template}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet operation.
     * @callback module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/automagic-dashboards/model_index/{model-index-id}/primary_key/{pk-id}
     * Return an automagic dashboard for an entity detail specified by `entity`   with id `id` and a primary key of `indexed-value`.
     * @param {Number} modelIndexId 
     * @param {Number} pkId 
     * @param {module:api/ApiAutomagicDashboardsApi~apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet(modelIndexId, pkId, callback) {
      let postBody = null;
      // verify the required parameter 'modelIndexId' is set
      if (modelIndexId === undefined || modelIndexId === null) {
        throw new Error("Missing the required parameter 'modelIndexId' when calling apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet");
      }
      // verify the required parameter 'pkId' is set
      if (pkId === undefined || pkId === null) {
        throw new Error("Missing the required parameter 'pkId' when calling apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet");
      }

      let pathParams = {
        'model-index-id': modelIndexId,
        'pk-id': pkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/automagic-dashboards/model_index/{model-index-id}/primary_key/{pk-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
