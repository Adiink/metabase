/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTestingMarkStalePostRequest from '../model/ApiTestingMarkStalePostRequest';
import ApiTestingSetTimePostRequest from '../model/ApiTestingSetTimePostRequest';

/**
* ApiTesting service.
* @module api/ApiTestingApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiTestingApi {

    /**
    * Constructs a new ApiTestingApi. 
    * @alias module:api/ApiTestingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTestingEchoGet operation.
     * @callback module:api/ApiTestingApi~apiTestingEchoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/testing/echo
     * Simple echo hander. Fails when you GET with `?fail=true`.
     * @param {Boolean} fail 
     * @param {String} body value must be a valid JSON string.
     * @param {module:api/ApiTestingApi~apiTestingEchoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTestingEchoGet(fail, body, callback) {
      let postBody = null;
      // verify the required parameter 'fail' is set
      if (fail === undefined || fail === null) {
        throw new Error("Missing the required parameter 'fail' when calling apiTestingEchoGet");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling apiTestingEchoGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fail': fail,
        'body': body
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/testing/echo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTestingEchoPost operation.
     * @callback module:api/ApiTestingApi~apiTestingEchoPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/testing/echo
     * Simple echo hander. Fails when you POST with `?fail=true`.
     * @param {Boolean} fail 
     * @param {module:api/ApiTestingApi~apiTestingEchoPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTestingEchoPost(fail, callback) {
      let postBody = null;
      // verify the required parameter 'fail' is set
      if (fail === undefined || fail === null) {
        throw new Error("Missing the required parameter 'fail' when calling apiTestingEchoPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'fail': fail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/testing/echo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTestingMarkStalePost operation.
     * @callback module:api/ApiTestingApi~apiTestingMarkStalePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/testing/mark-stale
     * Mark the card or dashboard as stale
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTestingMarkStalePostRequest} [apiTestingMarkStalePostRequest] 
     * @param {module:api/ApiTestingApi~apiTestingMarkStalePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTestingMarkStalePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiTestingMarkStalePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/testing/mark-stale', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTestingRestoreNamePost operation.
     * @callback module:api/ApiTestingApi~apiTestingRestoreNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/testing/restore/{name}
     * Restore a database snapshot for testing purposes.
     * @param {String} name value must be a non-blank string.
     * @param {module:api/ApiTestingApi~apiTestingRestoreNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTestingRestoreNamePost(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiTestingRestoreNamePost");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/testing/restore/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTestingSetTimePost operation.
     * @callback module:api/ApiTestingApi~apiTestingSetTimePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/testing/set-time
     * Make java-time see world at exact time.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTestingSetTimePostRequest} [apiTestingSetTimePostRequest] 
     * @param {module:api/ApiTestingApi~apiTestingSetTimePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTestingSetTimePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiTestingSetTimePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/testing/set-time', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTestingSnapshotNamePost operation.
     * @callback module:api/ApiTestingApi~apiTestingSnapshotNamePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/testing/snapshot/{name}
     * Snapshot the database for testing purposes.
     * @param {String} name value must be a non-blank string.
     * @param {module:api/ApiTestingApi~apiTestingSnapshotNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTestingSnapshotNamePost(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiTestingSnapshotNamePost");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/testing/snapshot/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTestingStatsPost operation.
     * @callback module:api/ApiTestingApi~apiTestingStatsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/testing/stats
     * Triggers a send of instance usage stats
     * @param {module:api/ApiTestingApi~apiTestingStatsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTestingStatsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/testing/stats', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
