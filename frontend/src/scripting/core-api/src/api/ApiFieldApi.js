/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiFieldIdDimensionPostRequest from '../model/ApiFieldIdDimensionPostRequest';
import ApiFieldIdPutRequest from '../model/ApiFieldIdPutRequest';
import ApiFieldIdValuesPostRequest from '../model/ApiFieldIdValuesPostRequest';

/**
* ApiField service.
* @module api/ApiFieldApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiFieldApi {

    /**
    * Constructs a new ApiFieldApi. 
    * @alias module:api/ApiFieldApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiFieldIdDimensionDelete operation.
     * @callback module:api/ApiFieldApi~apiFieldIdDimensionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/field/{id}/dimension
     * Remove the dimension associated to field at ID
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiFieldApi~apiFieldIdDimensionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdDimensionDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdDimensionDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/dimension', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdDimensionPost operation.
     * @callback module:api/ApiFieldApi~apiFieldIdDimensionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/field/{id}/dimension
     * Sets the dimension for the given field at ID
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiFieldIdDimensionPostRequest} [apiFieldIdDimensionPostRequest] 
     * @param {module:api/ApiFieldApi~apiFieldIdDimensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdDimensionPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiFieldIdDimensionPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdDimensionPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/dimension', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdDiscardValuesPost operation.
     * @callback module:api/ApiFieldApi~apiFieldIdDiscardValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/field/{id}/discard_values
     * Discard the FieldValues belonging to this Field. Only applies to fields that have FieldValues. If this Field's    Database is set up to automatically sync FieldValues, they will be recreated during the next cycle.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiFieldApi~apiFieldIdDiscardValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdDiscardValuesPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdDiscardValuesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/discard_values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdGet operation.
     * @callback module:api/ApiFieldApi~apiFieldIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/field/{id}
     * Get `Field` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Boolean} includeEditableDataModel 
     * @param {module:api/ApiFieldApi~apiFieldIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdGet(id, includeEditableDataModel, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdGet");
      }
      // verify the required parameter 'includeEditableDataModel' is set
      if (includeEditableDataModel === undefined || includeEditableDataModel === null) {
        throw new Error("Missing the required parameter 'includeEditableDataModel' when calling apiFieldIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_editable_data_model': includeEditableDataModel
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdPut operation.
     * @callback module:api/ApiFieldApi~apiFieldIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/field/{id}
     * Update `Field` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiFieldIdPutRequest} [apiFieldIdPutRequest] 
     * @param {module:api/ApiFieldApi~apiFieldIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiFieldIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdRelatedGet operation.
     * @callback module:api/ApiFieldApi~apiFieldIdRelatedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/field/{id}/related
     * Return related entities.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiFieldApi~apiFieldIdRelatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdRelatedGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdRelatedGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdRemappingRemappedIdGet operation.
     * @callback module:api/ApiFieldApi~apiFieldIdRemappingRemappedIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/field/{id}/remapping/{remapped-id}
     * Fetch remapped Field values.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Number} remappedId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {module:api/ApiFieldApi~apiFieldIdRemappingRemappedIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdRemappingRemappedIdGet(id, remappedId, value, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'remappedId' is set
      if (remappedId === undefined || remappedId === null) {
        throw new Error("Missing the required parameter 'remappedId' when calling apiFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiFieldIdRemappingRemappedIdGet");
      }

      let pathParams = {
        'id': id,
        'remapped-id': remappedId
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/remapping/{remapped-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdRescanValuesPost operation.
     * @callback module:api/ApiFieldApi~apiFieldIdRescanValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/field/{id}/rescan_values
     * Manually trigger an update for the FieldValues for this Field. Only applies to Fields that are eligible for    FieldValues.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiFieldApi~apiFieldIdRescanValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdRescanValuesPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdRescanValuesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/rescan_values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdSearchSearchIdGet operation.
     * @callback module:api/ApiFieldApi~apiFieldIdSearchSearchIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/field/{id}/search/{search-id}
     * Search for values of a Field with `search-id` that start with `value`. See docstring for   `metabase.api.field/search-values` for a more detailed explanation.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Number} searchId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {module:api/ApiFieldApi~apiFieldIdSearchSearchIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdSearchSearchIdGet(id, searchId, value, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdSearchSearchIdGet");
      }
      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling apiFieldIdSearchSearchIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiFieldIdSearchSearchIdGet");
      }

      let pathParams = {
        'id': id,
        'search-id': searchId
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/search/{search-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdSummaryGet operation.
     * @callback module:api/ApiFieldApi~apiFieldIdSummaryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/field/{id}/summary
     * Get the count and distinct count of `Field` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiFieldApi~apiFieldIdSummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdSummaryGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdSummaryGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdValuesGet operation.
     * @callback module:api/ApiFieldApi~apiFieldIdValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/field/{id}/values
     * If a Field's value of `has_field_values` is `:list`, return a list of all the distinct values of the Field (or   remapped Field), and (if defined by a User) a map of human-readable remapped values. If `has_field_values` is not   `:list`, checks whether we should create FieldValues for this Field; if so, creates and returns them.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiFieldApi~apiFieldIdValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdValuesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdValuesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiFieldIdValuesPost operation.
     * @callback module:api/ApiFieldApi~apiFieldIdValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/field/{id}/values
     * Update the fields values and human-readable values for a `Field` whose semantic type is   `category`/`city`/`state`/`country` or whose base type is `type/Boolean`. The human-readable values are optional.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiFieldIdValuesPostRequest} [apiFieldIdValuesPostRequest] 
     * @param {module:api/ApiFieldApi~apiFieldIdValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiFieldIdValuesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiFieldIdValuesPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiFieldIdValuesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/field/{id}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
