/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPermissionsGroupPostRequest from '../model/ApiPermissionsGroupPostRequest';
import ApiPermissionsMembershipIdPutRequest from '../model/ApiPermissionsMembershipIdPutRequest';
import ApiPermissionsMembershipPostRequest from '../model/ApiPermissionsMembershipPostRequest';

/**
* ApiPermissions service.
* @module api/ApiPermissionsApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiPermissionsApi {

    /**
    * Constructs a new ApiPermissionsApi. 
    * @alias module:api/ApiPermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPermissionsGraphDbDbIdGet operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGraphDbDbIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/permissions/graph/db/{db-id}
     * Fetch a graph of all Permissions for db-id `db-id`.
     * @param {Number} dbId value must be an integer greater than zero.
     * @param {module:api/ApiPermissionsApi~apiPermissionsGraphDbDbIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGraphDbDbIdGet(dbId, callback) {
      let postBody = null;
      // verify the required parameter 'dbId' is set
      if (dbId === undefined || dbId === null) {
        throw new Error("Missing the required parameter 'dbId' when calling apiPermissionsGraphDbDbIdGet");
      }

      let pathParams = {
        'db-id': dbId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/graph/db/{db-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGraphGet operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGraphGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/permissions/graph
     * Fetch a graph of all Permissions.
     * @param {module:api/ApiPermissionsApi~apiPermissionsGraphGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGraphGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGraphGroupGroupIdGet operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGraphGroupGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/permissions/graph/group/{group-id}
     * Fetch a graph of all Permissions for group-id `group-id`.
     * @param {Number} groupId value must be an integer greater than zero.
     * @param {module:api/ApiPermissionsApi~apiPermissionsGraphGroupGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGraphGroupGroupIdGet(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiPermissionsGraphGroupGroupIdGet");
      }

      let pathParams = {
        'group-id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/graph/group/{group-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGraphPut operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGraphPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/permissions/graph
     * Do a batch update of Permissions by passing in a modified graph. This should return the same graph, in the same   format, that you got from `GET /api/permissions/graph`, with any changes made in the wherever necessary. This   modified graph must correspond to the `PermissionsGraph` schema. If successful, this endpoint returns the updated   permissions graph; use this as a base for any further modifications.    Revisions to the permissions graph are tracked. If you fetch the permissions graph and some other third-party   modifies it before you can submit you revisions, the endpoint will instead make no changes and return a   409 (Conflict) response. In this case, you should fetch the updated graph and make desired changes to that.    The optional `sandboxes` key contains a list of sandboxes that should be created or modified in conjunction with   this permissions graph update. Since data sandboxing is an Enterprise Edition-only feature, a 402 (Payment Required)   response will be returned if this key is present and the server is not running the Enterprise Edition, and/or the   `:sandboxes` feature flag is not present.    If the skip-graph query param is truthy, then the graph will not be returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [skipGraph = false)] 
     * @param {Boolean} [force = false)] 
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/ApiPermissionsApi~apiPermissionsGraphPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGraphPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'skip-graph': opts['skipGraph'],
        'force': opts['force']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/graph', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGroupGet operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGroupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/permissions/group
     * Fetch all `PermissionsGroups`, including a count of the number of `:members` in that group.   This API requires superuser or group manager of more than one group.   Group manager is only available if `advanced-permissions` is enabled and returns only groups that user   is manager of.
     * @param {module:api/ApiPermissionsApi~apiPermissionsGroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGroupGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGroupGroupIdDelete operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGroupGroupIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/permissions/group/{group-id}
     * Delete a specific `PermissionsGroup`.
     * @param {Number} groupId value must be an integer greater than zero.
     * @param {module:api/ApiPermissionsApi~apiPermissionsGroupGroupIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGroupGroupIdDelete(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiPermissionsGroupGroupIdDelete");
      }

      let pathParams = {
        'group-id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/group/{group-id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGroupGroupIdPut operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGroupGroupIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/permissions/group/{group-id}
     * Update the name of a `PermissionsGroup`.
     * @param {Number} groupId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPermissionsGroupPostRequest} [apiPermissionsGroupPostRequest] 
     * @param {module:api/ApiPermissionsApi~apiPermissionsGroupGroupIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGroupGroupIdPut(groupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPermissionsGroupPostRequest'];
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiPermissionsGroupGroupIdPut");
      }

      let pathParams = {
        'group-id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/group/{group-id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGroupIdGet operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGroupIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/permissions/group/{id}
     * Fetch the details for a certain permissions group.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPermissionsApi~apiPermissionsGroupIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGroupIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPermissionsGroupIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/group/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsGroupPost operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsGroupPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/permissions/group
     * Create a new `PermissionsGroup`.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPermissionsGroupPostRequest} [apiPermissionsGroupPostRequest] 
     * @param {module:api/ApiPermissionsApi~apiPermissionsGroupPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsGroupPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPermissionsGroupPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsMembershipGet operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsMembershipGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/permissions/membership
     * Fetch a map describing the group memberships of various users.    This map's format is:      {<user-id> [{:membership_id    <id>                  :group_id         <id>                  :is_group_manager boolean}]}
     * @param {module:api/ApiPermissionsApi~apiPermissionsMembershipGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsMembershipGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/membership', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsMembershipGroupIdClearPut operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsMembershipGroupIdClearPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/permissions/membership/{group-id}/clear
     * Remove all members from a `PermissionsGroup`. Returns a 400 (Bad Request) if the group ID is for the admin group.
     * @param {Number} groupId value must be an integer greater than zero.
     * @param {module:api/ApiPermissionsApi~apiPermissionsMembershipGroupIdClearPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsMembershipGroupIdClearPut(groupId, callback) {
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling apiPermissionsMembershipGroupIdClearPut");
      }

      let pathParams = {
        'group-id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/membership/{group-id}/clear', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsMembershipIdDelete operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsMembershipIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/permissions/membership/{id}
     * Remove a User from a PermissionsGroup (delete their membership).
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPermissionsApi~apiPermissionsMembershipIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsMembershipIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPermissionsMembershipIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/membership/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsMembershipIdPut operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsMembershipIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/permissions/membership/{id}
     * Update a Permission Group membership. Returns the updated record.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPermissionsMembershipIdPutRequest} [apiPermissionsMembershipIdPutRequest] 
     * @param {module:api/ApiPermissionsApi~apiPermissionsMembershipIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsMembershipIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPermissionsMembershipIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPermissionsMembershipIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/membership/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPermissionsMembershipPost operation.
     * @callback module:api/ApiPermissionsApi~apiPermissionsMembershipPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/permissions/membership
     * Add a `User` to a `PermissionsGroup`. Returns updated list of members belonging to the group.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPermissionsMembershipPostRequest} [apiPermissionsMembershipPostRequest] 
     * @param {module:api/ApiPermissionsApi~apiPermissionsMembershipPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPermissionsMembershipPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPermissionsMembershipPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/permissions/membership', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
