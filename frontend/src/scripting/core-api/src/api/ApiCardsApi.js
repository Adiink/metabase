/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCardsDashboardsPostRequest from '../model/ApiCardsDashboardsPostRequest';
import ApiCardsMovePostRequest from '../model/ApiCardsMovePostRequest';

/**
* ApiCards service.
* @module api/ApiCardsApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiCardsApi {

    /**
    * Constructs a new ApiCardsApi. 
    * @alias module:api/ApiCardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCardsDashboardsPost operation.
     * @callback module:api/ApiCardsApi~apiCardsDashboardsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/cards/dashboards
     * Get the dashboards that multiple cards appear in. The response is a sequence of maps, each of which has a `card_id`   and `dashboards`. `dashboard` may include an `:error` key, either `:unreadable-dashboard` or   `:unwritable-dashboard`. In the case of an `unreadable-dashboard` the dashboard details (name, ID) will NOT be   present.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCardsDashboardsPostRequest} [apiCardsDashboardsPostRequest] 
     * @param {module:api/ApiCardsApi~apiCardsDashboardsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardsDashboardsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardsDashboardsPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/cards/dashboards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCardsMovePost operation.
     * @callback module:api/ApiCardsApi~apiCardsMovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/cards/move
     * Moves a number of Cards to a single collection or dashboard.    For now, just either succeed or fail as a batch - we can think more about error handling later down the road.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCardsMovePostRequest} [apiCardsMovePostRequest] 
     * @param {module:api/ApiCardsApi~apiCardsMovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCardsMovePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCardsMovePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/cards/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
