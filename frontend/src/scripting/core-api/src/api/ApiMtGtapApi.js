/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiMtGtapIdPutRequest from '../model/ApiMtGtapIdPutRequest';
import ApiMtGtapPostRequest from '../model/ApiMtGtapPostRequest';
import ApiMtGtapValidatePostRequest from '../model/ApiMtGtapValidatePostRequest';

/**
* ApiMtGtap service.
* @module api/ApiMtGtapApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiMtGtapApi {

    /**
    * Constructs a new ApiMtGtapApi. 
    * @alias module:api/ApiMtGtapApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiMtGtapGet operation.
     * @callback module:api/ApiMtGtapApi~apiMtGtapGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/mt/gtap/
     * Fetch a list of all GTAPs currently in use, or a single GTAP if both `group_id` and `table_id` are provided.
     * @param {Object} opts Optional parameters
     * @param {Number} [groupId] value must be an integer greater than zero.
     * @param {Number} [tableId] value must be an integer greater than zero.
     * @param {module:api/ApiMtGtapApi~apiMtGtapGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMtGtapGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'group_id': opts['groupId'],
        'table_id': opts['tableId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mt/gtap/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMtGtapIdDelete operation.
     * @callback module:api/ApiMtGtapApi~apiMtGtapIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/mt/gtap/{id}
     * Delete a GTAP entry.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiMtGtapApi~apiMtGtapIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMtGtapIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMtGtapIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mt/gtap/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMtGtapIdGet operation.
     * @callback module:api/ApiMtGtapApi~apiMtGtapIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/mt/gtap/{id}
     * Fetch GTAP by `id`
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiMtGtapApi~apiMtGtapIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMtGtapIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMtGtapIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mt/gtap/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMtGtapIdPut operation.
     * @callback module:api/ApiMtGtapApi~apiMtGtapIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/mt/gtap/{id}
     * Update a GTAP entry. The only things you're allowed to update for a GTAP are the Card being used (`card_id`) or the   paramter mappings; changing `table_id` or `group_id` would effectively be deleting this entry and creating a new   one. If that's what you want to do, do so explicity with appropriate calls to the `DELETE` and `POST` endpoints.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiMtGtapIdPutRequest} [apiMtGtapIdPutRequest] 
     * @param {module:api/ApiMtGtapApi~apiMtGtapIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMtGtapIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiMtGtapIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMtGtapIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mt/gtap/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMtGtapPost operation.
     * @callback module:api/ApiMtGtapApi~apiMtGtapPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/mt/gtap/
     * Create a new GTAP.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiMtGtapPostRequest} [apiMtGtapPostRequest] 
     * @param {module:api/ApiMtGtapApi~apiMtGtapPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMtGtapPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiMtGtapPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mt/gtap/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMtGtapValidatePost operation.
     * @callback module:api/ApiMtGtapApi~apiMtGtapValidatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/mt/gtap/validate
     * Validate a sandbox which may not have yet been saved. This runs the same validation that is performed when the   sandbox is saved, but doesn't actually save the sandbox.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiMtGtapValidatePostRequest} [apiMtGtapValidatePostRequest] 
     * @param {module:api/ApiMtGtapApi~apiMtGtapValidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiMtGtapValidatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiMtGtapValidatePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/mt/gtap/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
