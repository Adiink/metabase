/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiSegmentIdPutRequest from '../model/ApiSegmentIdPutRequest';
import ApiSegmentPostRequest from '../model/ApiSegmentPostRequest';

/**
* ApiSegment service.
* @module api/ApiSegmentApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiSegmentApi {

    /**
    * Constructs a new ApiSegmentApi. 
    * @alias module:api/ApiSegmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSegmentGet operation.
     * @callback module:api/ApiSegmentApi~apiSegmentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/segment/
     * Fetch *all* `Segments`.
     * @param {module:api/ApiSegmentApi~apiSegmentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSegmentGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/segment/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSegmentIdDelete operation.
     * @callback module:api/ApiSegmentApi~apiSegmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/segment/{id}
     * Archive a Segment. (DEPRECATED -- Just pass updated value of `:archived` to the `PUT` endpoint instead.)
     * @param {Number} id value must be an integer greater than zero.
     * @param {String} revisionMessage value must be a non-blank string.
     * @param {module:api/ApiSegmentApi~apiSegmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSegmentIdDelete(id, revisionMessage, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSegmentIdDelete");
      }
      // verify the required parameter 'revisionMessage' is set
      if (revisionMessage === undefined || revisionMessage === null) {
        throw new Error("Missing the required parameter 'revisionMessage' when calling apiSegmentIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'revision_message': revisionMessage
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/segment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSegmentIdGet operation.
     * @callback module:api/ApiSegmentApi~apiSegmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/segment/{id}
     * Fetch `Segment` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiSegmentApi~apiSegmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSegmentIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSegmentIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/segment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSegmentIdPut operation.
     * @callback module:api/ApiSegmentApi~apiSegmentIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/segment/{id}
     * Update a `Segment` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSegmentIdPutRequest} [apiSegmentIdPutRequest] 
     * @param {module:api/ApiSegmentApi~apiSegmentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSegmentIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSegmentIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSegmentIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/segment/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSegmentIdRelatedGet operation.
     * @callback module:api/ApiSegmentApi~apiSegmentIdRelatedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/segment/{id}/related
     * Return related entities.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiSegmentApi~apiSegmentIdRelatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSegmentIdRelatedGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiSegmentIdRelatedGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/segment/{id}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSegmentPost operation.
     * @callback module:api/ApiSegmentApi~apiSegmentPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/segment/
     * Create a new `Segment`.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSegmentPostRequest} [apiSegmentPostRequest] 
     * @param {module:api/ApiSegmentApi~apiSegmentPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSegmentPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSegmentPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/segment/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
