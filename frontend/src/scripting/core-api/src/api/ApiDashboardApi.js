/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPostRequest from '../model/ApiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPostRequest';
import ApiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest from '../model/ApiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest';
import ApiDashboardDashboardIdDashcardDashcardIdExecutePostRequest from '../model/ApiDashboardDashboardIdDashcardDashcardIdExecutePostRequest';
import ApiDashboardFromDashboardIdCopyPostRequest from '../model/ApiDashboardFromDashboardIdCopyPostRequest';
import ApiDashboardIdCardsPutRequest from '../model/ApiDashboardIdCardsPutRequest';
import ApiDashboardIdPutRequest from '../model/ApiDashboardIdPutRequest';
import ApiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest from '../model/ApiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest';
import ApiDashboardPostRequest from '../model/ApiDashboardPostRequest';

/**
* ApiDashboard service.
* @module api/ApiDashboardApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiDashboardApi {

    /**
    * Constructs a new ApiDashboardApi. 
    * @alias module:api/ApiDashboardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query/{export-format}
     * Run the query associated with a Saved Question (`Card`) in the context of a `Dashboard` that includes it, and return   its results as a file in the specified format.    `parameters` should be passed as query parameter encoded as a serialized JSON string (this is because this endpoint   is normally used to power 'Download Results' buttons that use HTML `form` actions).
     * @param {Number} dashboardId value must be an integer greater than zero.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:model/String} exportFormat 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPostRequest} [apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPostRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPost(dashboardId, dashcardId, cardId, exportFormat, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPostRequest'];
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPost");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPost");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPost");
      }
      // verify the required parameter 'exportFormat' is set
      if (exportFormat === undefined || exportFormat === null) {
        throw new Error("Missing the required parameter 'exportFormat' when calling apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryExportFormatPost");
      }

      let pathParams = {
        'dashboard-id': dashboardId,
        'dashcard-id': dashcardId,
        'card-id': cardId,
        'export-format': exportFormat
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query/{export-format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query
     * Run the query associated with a Saved Question (`Card`) in the context of a `Dashboard` that includes it.
     * @param {Number} dashboardId value must be an integer greater than zero.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest} [apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPost(dashboardId, dashcardId, cardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest'];
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPost");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPost");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiDashboardDashboardIdDashcardDashcardIdCardCardIdQueryPost");
      }

      let pathParams = {
        'dashboard-id': dashboardId,
        'dashcard-id': dashcardId,
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardDashboardIdDashcardDashcardIdExecuteGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdExecuteGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute
     * Fetches the values for filling in execution parameters. Pass PK parameters and values to select.
     * @param {Number} dashboardId value must be an integer greater than zero.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {String} [parameters] value must be a valid JSON string.
     * @param {module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdExecuteGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardDashboardIdDashcardDashcardIdExecuteGet(dashboardId, dashcardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiDashboardDashboardIdDashcardDashcardIdExecuteGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiDashboardDashboardIdDashcardDashcardIdExecuteGet");
      }

      let pathParams = {
        'dashboard-id': dashboardId,
        'dashcard-id': dashcardId
      };
      let queryParams = {
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardDashboardIdDashcardDashcardIdExecutePost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdExecutePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute
     * Execute the associated Action in the context of a `Dashboard` and `DashboardCard` that includes it.     `parameters` should be the mapped dashboard parameters with values.    `extra_parameters` should be the extra, user entered parameter values.
     * @param {Number} dashboardId value must be an integer greater than zero.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardDashboardIdDashcardDashcardIdExecutePostRequest} [apiDashboardDashboardIdDashcardDashcardIdExecutePostRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardDashboardIdDashcardDashcardIdExecutePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardDashboardIdDashcardDashcardIdExecutePost(dashboardId, dashcardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardDashboardIdDashcardDashcardIdExecutePostRequest'];
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiDashboardDashboardIdDashcardDashcardIdExecutePost");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiDashboardDashboardIdDashcardDashcardIdExecutePost");
      }

      let pathParams = {
        'dashboard-id': dashboardId,
        'dashcard-id': dashcardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{dashboard-id}/dashcard/{dashcard-id}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardDashboardIdPublicLinkDelete operation.
     * @callback module:api/ApiDashboardApi~apiDashboardDashboardIdPublicLinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/dashboard/{dashboard-id}/public_link
     * Delete the publicly-accessible link to this Dashboard.
     * @param {Number} dashboardId value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardDashboardIdPublicLinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardDashboardIdPublicLinkDelete(dashboardId, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiDashboardDashboardIdPublicLinkDelete");
      }

      let pathParams = {
        'dashboard-id': dashboardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{dashboard-id}/public_link', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardDashboardIdPublicLinkPost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardDashboardIdPublicLinkPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/{dashboard-id}/public_link
     * Generate publicly-accessible links for this Dashboard. Returns UUID to be used in public links. (If this   Dashboard has already been shared, it will return the existing public link rather than creating a new one.) Public   sharing must be enabled.
     * @param {Number} dashboardId value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardDashboardIdPublicLinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardDashboardIdPublicLinkPost(dashboardId, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiDashboardDashboardIdPublicLinkPost");
      }

      let pathParams = {
        'dashboard-id': dashboardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{dashboard-id}/public_link', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardEmbeddableGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardEmbeddableGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/embeddable
     * Fetch a list of Dashboards where `enable_embedding` is `true`. The dashboards can be embedded using the embedding   endpoints and a signed JWT.
     * @param {module:api/ApiDashboardApi~apiDashboardEmbeddableGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardEmbeddableGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/embeddable', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardFromDashboardIdCopyPost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardFromDashboardIdCopyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/{from-dashboard-id}/copy
     * Copy a Dashboard.
     * @param {Number} fromDashboardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardFromDashboardIdCopyPostRequest} [apiDashboardFromDashboardIdCopyPostRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardFromDashboardIdCopyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardFromDashboardIdCopyPost(fromDashboardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardFromDashboardIdCopyPostRequest'];
      // verify the required parameter 'fromDashboardId' is set
      if (fromDashboardId === undefined || fromDashboardId === null) {
        throw new Error("Missing the required parameter 'fromDashboardId' when calling apiDashboardFromDashboardIdCopyPost");
      }

      let pathParams = {
        'from-dashboard-id': fromDashboardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{from-dashboard-id}/copy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/
     * This endpoint is currently unused by the Metabase frontend and may be out of date with the rest of the application.   It only exists for backwards compatibility and may be removed in the future.    Get `Dashboards`. With filter option `f` (default `all`), restrict results as follows:   *  `all`      - Return all Dashboards.   *  `mine`     - Return Dashboards created by the current user.   *  `archived` - Return Dashboards that have been archived. (By default, these are *excluded*.)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [f] 
     * @param {module:api/ApiDashboardApi~apiDashboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'f': opts['f']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdCardsPut operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdCardsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/dashboard/{id}/cards
     * (DEPRECATED -- Use the `PUT /api/dashboard/:id` endpoint instead.)    Update `Cards` and `Tabs` on a Dashboard. Request body should have the form:      {:cards        [{:id                 ... ; DashboardCard ID                      :size_x             ...                      :size_y             ...                      :row                ...                      :col                ...                      :parameter_mappings ...                      :series             [{:id 123                                            ...}]}                      ...]      :tabs [{:id       ... ; DashboardTab ID                      :name     ...}]}
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardIdCardsPutRequest} [apiDashboardIdCardsPutRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardIdCardsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdCardsPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardIdCardsPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdCardsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}/cards', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdDelete operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/dashboard/{id}
     * Hard delete a Dashboard. To soft delete, use `PUT /api/dashboard/:id`    This will remove also any questions/models/segments/metrics that use this database.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/{id}
     * Get Dashboard with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdItemsGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdItemsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/{id}/items
     * Get Dashboard with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardIdItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdItemsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdItemsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdParamsParamKeySearchQueryGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdParamsParamKeySearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/{id}/params/{param-key}/search/{query}
     * Fetch possible values of the parameter whose ID is `:param-key` that contain `:query`. Optionally restrict   these values by passing query parameters like `other-parameter=value` e.g.      ;; fetch values for Dashboard 1 parameter 'abc' that contain 'Cam' and are possible when parameter 'def' is set     ;; to 100      GET /api/dashboard/1/params/abc/search/Cam?def=100    Currently limited to first 1000 results.
     * @param {Number} id value must be an integer greater than zero.
     * @param {String} query value must be a non-blank string.
     * @param {module:api/ApiDashboardApi~apiDashboardIdParamsParamKeySearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdParamsParamKeySearchQueryGet(id, query, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdParamsParamKeySearchQueryGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling apiDashboardIdParamsParamKeySearchQueryGet");
      }

      let pathParams = {
        'id': id,
        'query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}/params/{param-key}/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdParamsParamKeyValuesGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdParamsParamKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/{id}/params/{param-key}/values
     * Fetch possible values of the parameter whose ID is `:param-key`. If the values come directly from a query, optionally   restrict these values by passing query parameters like `other-parameter=value` e.g.      ;; fetch values for Dashboard 1 parameter 'abc' that are possible when parameter 'def' is set to 100     GET /api/dashboard/1/params/abc/values?def=100
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardIdParamsParamKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdParamsParamKeyValuesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdParamsParamKeyValuesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}/params/{param-key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdPut operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/dashboard/{id}
     * Update a Dashboard, and optionally the `dashcards` and `tabs` of a Dashboard. The request body should be a JSON object with the same   structure as the response from `GET /api/dashboard/:id`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardIdPutRequest} [apiDashboardIdPutRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdQueryMetadataGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdQueryMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/{id}/query_metadata
     * Get all of the required query metadata for the cards on dashboard.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardIdQueryMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdQueryMetadataGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdQueryMetadataGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}/query_metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardIdRelatedGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardIdRelatedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/{id}/related
     * Return related entities.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardIdRelatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardIdRelatedGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDashboardIdRelatedGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/{id}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardParamsValidFilterFieldsGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardParamsValidFilterFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/params/valid-filter-fields
     * Utility endpoint for powering Dashboard UI. Given some set of `filtered` Field IDs (presumably Fields used in   parameters) and a set of `filtering` Field IDs that will be used to restrict values of `filtered` Fields, for each   `filtered` Field ID return the subset of `filtering` Field IDs that would actually be used in a chain filter query   with these Fields.    e.g. in a chain filter query like    GET /api/dashboard/10/params/PARAM_1/values?PARAM_2=100    Assume `PARAM_1` maps to Field 1 and `PARAM_2` maps to Fields 2 and 3. The underlying MBQL query may or may not   filter against Fields 2 and 3, depending on whether an FK relationship that lets us create a join against Field 1   can be found. You can use this endpoint to determine which of those Fields is actually used:    GET /api/dashboard/params/valid-filter-fields?filtered=1&filtering=2&filtering=3   ;; ->   {1 [2 3]}    Results are returned as a map of    `filtered` Field ID -> subset of `filtering` Field IDs that would be used in chain filter query
     * @param {Array.<Number>} filtered 
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [filtering] 
     * @param {module:api/ApiDashboardApi~apiDashboardParamsValidFilterFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardParamsValidFilterFieldsGet(filtered, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'filtered' is set
      if (filtered === undefined || filtered === null) {
        throw new Error("Missing the required parameter 'filtered' when calling apiDashboardParamsValidFilterFieldsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'filtered': this.apiClient.buildCollectionParam(filtered, 'multi'),
        'filtering': this.apiClient.buildCollectionParam(opts['filtering'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/params/valid-filter-fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/pivot/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query
     * Run a pivot table query for a specific DashCard.
     * @param {Number} dashboardId value must be an integer greater than zero.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest} [apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPost(dashboardId, dashcardId, cardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPostRequest'];
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPost");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPost");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiDashboardPivotDashboardIdDashcardDashcardIdCardCardIdQueryPost");
      }

      let pathParams = {
        'dashboard-id': dashboardId,
        'dashcard-id': dashcardId,
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/pivot/{dashboard-id}/dashcard/{dashcard-id}/card/{card-id}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardPost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/
     * Create a new Dashboard.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardPostRequest} [apiDashboardPostRequest] 
     * @param {module:api/ApiDashboardApi~apiDashboardPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardPublicGet operation.
     * @callback module:api/ApiDashboardApi~apiDashboardPublicGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/dashboard/public
     * Fetch a list of Dashboards with public UUIDs. These dashboards are publicly-accessible *if* public sharing is   enabled.
     * @param {module:api/ApiDashboardApi~apiDashboardPublicGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardPublicGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardSaveCollectionParentCollectionIdPost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardSaveCollectionParentCollectionIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/save/collection/{parent-collection-id}
     * Save a denormalized description of dashboard into collection with ID `:parent-collection-id`.
     * @param {Number} parentCollectionId value must be an integer greater than zero.
     * @param {module:api/ApiDashboardApi~apiDashboardSaveCollectionParentCollectionIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardSaveCollectionParentCollectionIdPost(parentCollectionId, callback) {
      let postBody = null;
      // verify the required parameter 'parentCollectionId' is set
      if (parentCollectionId === undefined || parentCollectionId === null) {
        throw new Error("Missing the required parameter 'parentCollectionId' when calling apiDashboardSaveCollectionParentCollectionIdPost");
      }

      let pathParams = {
        'parent-collection-id': parentCollectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/save/collection/{parent-collection-id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDashboardSavePost operation.
     * @callback module:api/ApiDashboardApi~apiDashboardSavePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/dashboard/save
     * Save a denormalized description of dashboard.
     * @param {module:api/ApiDashboardApi~apiDashboardSavePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDashboardSavePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/dashboard/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
