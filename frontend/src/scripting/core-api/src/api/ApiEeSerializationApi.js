/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiEeSerializationExportPostCollectionParameterInner from '../model/ApiEeSerializationExportPostCollectionParameterInner';
import ApiEeSerializationImportPostRequestFile from '../model/ApiEeSerializationImportPostRequestFile';

/**
* ApiEeSerialization service.
* @module api/ApiEeSerializationApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiEeSerializationApi {

    /**
    * Constructs a new ApiEeSerializationApi. 
    * @alias module:api/ApiEeSerializationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiEeSerializationExportPost operation.
     * @callback module:api/ApiEeSerializationApi~apiEeSerializationExportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/ee/serialization/export
     * Serialize and retrieve Metabase instance.    Outputs `.tar.gz` file with serialization results and an `export.log` file.   On error outputs serialization logs directly.
     * @param {Boolean} allCollections 
     * @param {Boolean} settings 
     * @param {Boolean} dataModel 
     * @param {Boolean} fieldValues 
     * @param {Boolean} databaseSecrets 
     * @param {Boolean} continueOnError 
     * @param {Boolean} fullStacktrace 
     * @param {Object} opts Optional parameters
     * @param {String} [dirname] name of directory and archive file (default: `<instance-name>-<YYYY-MM-dd_HH-mm>`)
     * @param {Array.<module:model/ApiEeSerializationExportPostCollectionParameterInner>} [collection] collections' db ids/entity-ids to serialize
     * @param {module:api/ApiEeSerializationApi~apiEeSerializationExportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEeSerializationExportPost(allCollections, settings, dataModel, fieldValues, databaseSecrets, continueOnError, fullStacktrace, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'allCollections' is set
      if (allCollections === undefined || allCollections === null) {
        throw new Error("Missing the required parameter 'allCollections' when calling apiEeSerializationExportPost");
      }
      // verify the required parameter 'settings' is set
      if (settings === undefined || settings === null) {
        throw new Error("Missing the required parameter 'settings' when calling apiEeSerializationExportPost");
      }
      // verify the required parameter 'dataModel' is set
      if (dataModel === undefined || dataModel === null) {
        throw new Error("Missing the required parameter 'dataModel' when calling apiEeSerializationExportPost");
      }
      // verify the required parameter 'fieldValues' is set
      if (fieldValues === undefined || fieldValues === null) {
        throw new Error("Missing the required parameter 'fieldValues' when calling apiEeSerializationExportPost");
      }
      // verify the required parameter 'databaseSecrets' is set
      if (databaseSecrets === undefined || databaseSecrets === null) {
        throw new Error("Missing the required parameter 'databaseSecrets' when calling apiEeSerializationExportPost");
      }
      // verify the required parameter 'continueOnError' is set
      if (continueOnError === undefined || continueOnError === null) {
        throw new Error("Missing the required parameter 'continueOnError' when calling apiEeSerializationExportPost");
      }
      // verify the required parameter 'fullStacktrace' is set
      if (fullStacktrace === undefined || fullStacktrace === null) {
        throw new Error("Missing the required parameter 'fullStacktrace' when calling apiEeSerializationExportPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'dirname': opts['dirname'],
        'collection': this.apiClient.buildCollectionParam(opts['collection'], 'multi'),
        'all_collections': allCollections,
        'settings': settings,
        'data_model': dataModel,
        'field_values': fieldValues,
        'database_secrets': databaseSecrets,
        'continue_on_error': continueOnError,
        'full_stacktrace': fullStacktrace
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/ee/serialization/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEeSerializationImportPost operation.
     * @callback module:api/ApiEeSerializationApi~apiEeSerializationImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/ee/serialization/import
     * Deserialize Metabase instance from an archive generated by /export.    Parameters:   - `file`: archive encoded as `multipart/form-data` (required).    Returns logs of deserialization.
     * @param {Boolean} continueOnError 
     * @param {Boolean} fullStacktrace 
     * @param {module:model/ApiEeSerializationImportPostRequestFile} file 
     * @param {module:api/ApiEeSerializationApi~apiEeSerializationImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEeSerializationImportPost(continueOnError, fullStacktrace, file, callback) {
      let postBody = null;
      // verify the required parameter 'continueOnError' is set
      if (continueOnError === undefined || continueOnError === null) {
        throw new Error("Missing the required parameter 'continueOnError' when calling apiEeSerializationImportPost");
      }
      // verify the required parameter 'fullStacktrace' is set
      if (fullStacktrace === undefined || fullStacktrace === null) {
        throw new Error("Missing the required parameter 'fullStacktrace' when calling apiEeSerializationImportPost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiEeSerializationImportPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'continue_on_error': continueOnError,
        'full_stacktrace': fullStacktrace
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/ee/serialization/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
