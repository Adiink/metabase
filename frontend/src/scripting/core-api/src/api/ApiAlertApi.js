/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiAlertIdPutRequest from '../model/ApiAlertIdPutRequest';
import ApiAlertPostRequest from '../model/ApiAlertPostRequest';

/**
* ApiAlert service.
* @module api/ApiAlertApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiAlertApi {

    /**
    * Constructs a new ApiAlertApi. 
    * @alias module:api/ApiAlertApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiAlertGet operation.
     * @callback module:api/ApiAlertApi~apiAlertGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/alert/
     * Fetch alerts which the current user has created or will receive, or all alerts if the user is an admin.   The optional `user_id` will return alerts created by the corresponding user, but is ignored for non-admin users.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [archived = false)] 
     * @param {Number} [userId] value must be an integer greater than zero.
     * @param {module:api/ApiAlertApi~apiAlertGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlertGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'archived': opts['archived'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/alert/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertIdGet operation.
     * @callback module:api/ApiAlertApi~apiAlertIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/alert/{id}
     * Fetch an alert by ID
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiAlertApi~apiAlertIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlertIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/alert/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertIdPut operation.
     * @callback module:api/ApiAlertApi~apiAlertIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/alert/{id}
     * Update a `Alert` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAlertIdPutRequest} [apiAlertIdPutRequest] 
     * @param {module:api/ApiAlertApi~apiAlertIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlertIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiAlertIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/alert/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertIdSubscriptionDelete operation.
     * @callback module:api/ApiAlertApi~apiAlertIdSubscriptionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/alert/{id}/subscription
     * For users to unsubscribe themselves from the given alert.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiAlertApi~apiAlertIdSubscriptionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlertIdSubscriptionDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertIdSubscriptionDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/alert/{id}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertPost operation.
     * @callback module:api/ApiAlertApi~apiAlertPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/alert/
     * Create a new Alert.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiAlertPostRequest} [apiAlertPostRequest] 
     * @param {module:api/ApiAlertApi~apiAlertPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlertPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiAlertPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/alert/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlertQuestionIdGet operation.
     * @callback module:api/ApiAlertApi~apiAlertQuestionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/alert/question/{id}
     * Fetch all alerts for the given question (`Card`) id
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [archived = false)] 
     * @param {module:api/ApiAlertApi~apiAlertQuestionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiAlertQuestionIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAlertQuestionIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/alert/question/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
