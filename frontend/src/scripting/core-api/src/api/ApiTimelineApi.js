/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiTimelineIdPutRequest from '../model/ApiTimelineIdPutRequest';
import ApiTimelinePostRequest from '../model/ApiTimelinePostRequest';
import MetabaseTimelineApiTimelineInclude from '../model/MetabaseTimelineApiTimelineInclude';

/**
* ApiTimeline service.
* @module api/ApiTimelineApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiTimelineApi {

    /**
    * Constructs a new ApiTimelineApi. 
    * @alias module:api/ApiTimelineApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTimelineCollectionIdGet operation.
     * @callback module:api/ApiTimelineApi~apiTimelineCollectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/timeline/collection/{id}
     * Fetch a specific Collection's timelines.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Object} [include] 
     * @param {Boolean} [archived = false)] 
     * @param {module:api/ApiTimelineApi~apiTimelineCollectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTimelineCollectionIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTimelineCollectionIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include'],
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/timeline/collection/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTimelineCollectionRootGet operation.
     * @callback module:api/ApiTimelineApi~apiTimelineCollectionRootGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/timeline/collection/root
     * Fetch the root Collection's timelines.
     * @param {Object} opts Optional parameters
     * @param {Object} [include] 
     * @param {Boolean} [archived = false)] 
     * @param {module:api/ApiTimelineApi~apiTimelineCollectionRootGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTimelineCollectionRootGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include'],
        'archived': opts['archived']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/timeline/collection/root', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTimelineGet operation.
     * @callback module:api/ApiTimelineApi~apiTimelineGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/timeline/
     * Fetch a list of `Timeline`s. Can include `archived=true` to return archived timelines.
     * @param {Boolean} archived 
     * @param {Object} opts Optional parameters
     * @param {module:model/MetabaseTimelineApiTimelineInclude} [include] 
     * @param {module:api/ApiTimelineApi~apiTimelineGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTimelineGet(archived, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'archived' is set
      if (archived === undefined || archived === null) {
        throw new Error("Missing the required parameter 'archived' when calling apiTimelineGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include'],
        'archived': archived
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/timeline/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTimelineIdDelete operation.
     * @callback module:api/ApiTimelineApi~apiTimelineIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/timeline/{id}
     * Delete a [[Timeline]]. Will cascade delete its events as well.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiTimelineApi~apiTimelineIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTimelineIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTimelineIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/timeline/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTimelineIdGet operation.
     * @callback module:api/ApiTimelineApi~apiTimelineIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/timeline/{id}
     * Fetch the `Timeline` with `id`. Include `include=events` to unarchived events included on the timeline. Add   `archived=true` to return all events on the timeline, both archived and unarchived.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Boolean} archived 
     * @param {Object} opts Optional parameters
     * @param {module:model/MetabaseTimelineApiTimelineInclude} [include] 
     * @param {String} [start] value must be a valid date string
     * @param {String} [end] value must be a valid date string
     * @param {module:api/ApiTimelineApi~apiTimelineIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTimelineIdGet(id, archived, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTimelineIdGet");
      }
      // verify the required parameter 'archived' is set
      if (archived === undefined || archived === null) {
        throw new Error("Missing the required parameter 'archived' when calling apiTimelineIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include'],
        'archived': archived,
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/timeline/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTimelineIdPut operation.
     * @callback module:api/ApiTimelineApi~apiTimelineIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/timeline/{id}
     * Update the [[Timeline]] with `id`. Returns the timeline without events. Archiving a timeline will archive all of the   events in that timeline.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTimelineIdPutRequest} [apiTimelineIdPutRequest] 
     * @param {module:api/ApiTimelineApi~apiTimelineIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTimelineIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiTimelineIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTimelineIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/timeline/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTimelinePost operation.
     * @callback module:api/ApiTimelineApi~apiTimelinePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/timeline/
     * Create a new [[Timeline]].
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTimelinePostRequest} [apiTimelinePostRequest] 
     * @param {module:api/ApiTimelineApi~apiTimelinePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTimelinePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiTimelinePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/timeline/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
