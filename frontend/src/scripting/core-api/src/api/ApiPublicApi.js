/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiDashboardDashboardIdDashcardDashcardIdExecutePostRequest from '../model/ApiDashboardDashboardIdDashcardDashcardIdExecutePostRequest';
import ApiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPostRequest from '../model/ApiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPostRequest';

/**
* ApiPublic service.
* @module api/ApiPublicApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiPublicApi {

    /**
    * Constructs a new ApiPublicApi. 
    * @alias module:api/ApiPublicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPublicActionUuidExecutePost operation.
     * @callback module:api/ApiPublicApi~apiPublicActionUuidExecutePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/public/action/{uuid}/execute
     * Execute the Action.     `parameters` should be the mapped dashboard parameters with values.
     * @param {String} uuid value must be a valid UUID.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardDashboardIdDashcardDashcardIdExecutePostRequest} [apiDashboardDashboardIdDashcardDashcardIdExecutePostRequest] 
     * @param {module:api/ApiPublicApi~apiPublicActionUuidExecutePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicActionUuidExecutePost(uuid, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardDashboardIdDashcardDashcardIdExecutePostRequest'];
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicActionUuidExecutePost");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/action/{uuid}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicActionUuidGet operation.
     * @callback module:api/ApiPublicApi~apiPublicActionUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/action/{uuid}
     * Fetch a publicly-accessible Action. Does not require auth credentials. Public sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {module:api/ApiPublicApi~apiPublicActionUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicActionUuidGet(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicActionUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/action/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidFieldFieldIdRemappingRemappedIdGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidFieldFieldIdRemappingRemappedIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}/field/{field-id}/remapping/{remapped-id}
     * Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with public   Cards.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} remappedId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidFieldFieldIdRemappingRemappedIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidFieldFieldIdRemappingRemappedIdGet(uuid, fieldId, remappedId, value, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiPublicCardUuidFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'remappedId' is set
      if (remappedId === undefined || remappedId === null) {
        throw new Error("Missing the required parameter 'remappedId' when calling apiPublicCardUuidFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiPublicCardUuidFieldFieldIdRemappingRemappedIdGet");
      }

      let pathParams = {
        'uuid': uuid,
        'field-id': fieldId,
        'remapped-id': remappedId
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}/field/{field-id}/remapping/{remapped-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}/field/{field-id}/search/{search-field-id}
     * Search for values of a Field that is referenced by a public Card.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} searchFieldId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] value must be an integer greater than zero.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGet(uuid, fieldId, searchFieldId, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'searchFieldId' is set
      if (searchFieldId === undefined || searchFieldId === null) {
        throw new Error("Missing the required parameter 'searchFieldId' when calling apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiPublicCardUuidFieldFieldIdSearchSearchFieldIdGet");
      }

      let pathParams = {
        'uuid': uuid,
        'field-id': fieldId,
        'search-field-id': searchFieldId
      };
      let queryParams = {
        'value': value,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}/field/{field-id}/search/{search-field-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidFieldFieldIdValuesGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidFieldFieldIdValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}/field/{field-id}/values
     * Fetch FieldValues for a Field that is referenced by a public Card.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidFieldFieldIdValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidFieldFieldIdValuesGet(uuid, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidFieldFieldIdValuesGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiPublicCardUuidFieldFieldIdValuesGet");
      }

      let pathParams = {
        'uuid': uuid,
        'field-id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}/field/{field-id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}
     * Fetch a publicly-accessible Card an return query results as well as `:card` information. Does not require auth    credentials. Public sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidGet(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidParamsParamKeySearchQueryGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidParamsParamKeySearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}/params/{param-key}/search/{query}
     * Fetch values for a parameter on a public card containing `query`.
     * @param {String} uuid value must be a valid UUID.
     * @param {String} paramKey value must be a non-blank string.
     * @param {String} query value must be a non-blank string.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidParamsParamKeySearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidParamsParamKeySearchQueryGet(uuid, paramKey, query, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidParamsParamKeySearchQueryGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiPublicCardUuidParamsParamKeySearchQueryGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling apiPublicCardUuidParamsParamKeySearchQueryGet");
      }

      let pathParams = {
        'uuid': uuid,
        'param-key': paramKey,
        'query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}/params/{param-key}/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidParamsParamKeyValuesGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidParamsParamKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}/params/{param-key}/values
     * Fetch values for a parameter on a public card.
     * @param {String} uuid value must be a valid UUID.
     * @param {String} paramKey value must be a non-blank string.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidParamsParamKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidParamsParamKeyValuesGet(uuid, paramKey, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidParamsParamKeyValuesGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiPublicCardUuidParamsParamKeyValuesGet");
      }

      let pathParams = {
        'uuid': uuid,
        'param-key': paramKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}/params/{param-key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidQueryExportFormatGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidQueryExportFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}/query/{export-format}
     * Fetch a publicly-accessible Card and return query results in the specified format. Does not require auth   credentials. Public sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {module:model/String} exportFormat 
     * @param {Boolean} formatRows 
     * @param {Boolean} pivotResults 
     * @param {Object} opts Optional parameters
     * @param {String} [parameters] value must be a valid JSON string.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidQueryExportFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidQueryExportFormatGet(uuid, exportFormat, formatRows, pivotResults, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidQueryExportFormatGet");
      }
      // verify the required parameter 'exportFormat' is set
      if (exportFormat === undefined || exportFormat === null) {
        throw new Error("Missing the required parameter 'exportFormat' when calling apiPublicCardUuidQueryExportFormatGet");
      }
      // verify the required parameter 'formatRows' is set
      if (formatRows === undefined || formatRows === null) {
        throw new Error("Missing the required parameter 'formatRows' when calling apiPublicCardUuidQueryExportFormatGet");
      }
      // verify the required parameter 'pivotResults' is set
      if (pivotResults === undefined || pivotResults === null) {
        throw new Error("Missing the required parameter 'pivotResults' when calling apiPublicCardUuidQueryExportFormatGet");
      }

      let pathParams = {
        'uuid': uuid,
        'export-format': exportFormat
      };
      let queryParams = {
        'format_rows': formatRows,
        'pivot_results': pivotResults,
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}/query/{export-format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicCardUuidQueryGet operation.
     * @callback module:api/ApiPublicApi~apiPublicCardUuidQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/card/{uuid}/query
     * Fetch a publicly-accessible Card an return query results as well as `:card` information. Does not require auth    credentials. Public sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {Object} opts Optional parameters
     * @param {String} [parameters] value must be a valid JSON string.
     * @param {module:api/ApiPublicApi~apiPublicCardUuidQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicCardUuidQueryGet(uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicCardUuidQueryGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/card/{uuid}/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPost operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}/{export-format}
     * Fetch the results of running a publicly-accessible Card belonging to a Dashboard and return the data in one of the   export formats. Does not require auth credentials. Public sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:model/String} exportFormat 
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPostRequest} [apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPostRequest] 
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPost(uuid, dashcardId, cardId, exportFormat, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPostRequest'];
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPost");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPost");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPost");
      }
      // verify the required parameter 'exportFormat' is set
      if (exportFormat === undefined || exportFormat === null) {
        throw new Error("Missing the required parameter 'exportFormat' when calling apiPublicDashboardUuidDashcardDashcardIdCardCardIdExportFormatPost");
      }

      let pathParams = {
        'uuid': uuid,
        'dashcard-id': dashcardId,
        'card-id': cardId,
        'export-format': exportFormat
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}/{export-format}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidDashcardDashcardIdCardCardIdGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdCardCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}
     * Fetch the results for a Card in a publicly-accessible Dashboard. Does not require auth credentials. Public    sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {String} [parameters] value must be a valid JSON string.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdCardCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidDashcardDashcardIdCardCardIdGet(uuid, dashcardId, cardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiPublicDashboardUuidDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPublicDashboardUuidDashcardDashcardIdCardCardIdGet");
      }

      let pathParams = {
        'uuid': uuid,
        'dashcard-id': dashcardId,
        'card-id': cardId
      };
      let queryParams = {
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidDashcardDashcardIdExecuteGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdExecuteGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/execute
     * Fetches the values for filling in execution parameters. Pass PK parameters and values to select.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {String} parameters value must be a valid JSON string.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdExecuteGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidDashcardDashcardIdExecuteGet(uuid, dashcardId, parameters, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidDashcardDashcardIdExecuteGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiPublicDashboardUuidDashcardDashcardIdExecuteGet");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling apiPublicDashboardUuidDashcardDashcardIdExecuteGet");
      }

      let pathParams = {
        'uuid': uuid,
        'dashcard-id': dashcardId
      };
      let queryParams = {
        'parameters': parameters
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/dashcard/{dashcard-id}/execute', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidDashcardDashcardIdExecutePost operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdExecutePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/public/dashboard/{uuid}/dashcard/{dashcard-id}/execute
     * Execute the associated Action in the context of a `Dashboard` and `DashboardCard` that includes it.     `parameters` should be the mapped dashboard parameters with values.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDashboardDashboardIdDashcardDashcardIdExecutePostRequest} [apiDashboardDashboardIdDashcardDashcardIdExecutePostRequest] 
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidDashcardDashcardIdExecutePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidDashcardDashcardIdExecutePost(uuid, dashcardId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDashboardDashboardIdDashcardDashcardIdExecutePostRequest'];
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidDashcardDashcardIdExecutePost");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiPublicDashboardUuidDashcardDashcardIdExecutePost");
      }

      let pathParams = {
        'uuid': uuid,
        'dashcard-id': dashcardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/dashcard/{dashcard-id}/execute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}/field/{field-id}/remapping/{remapped-id}
     * Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with public   Dashboards.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} remappedId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGet(uuid, fieldId, remappedId, value, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'remappedId' is set
      if (remappedId === undefined || remappedId === null) {
        throw new Error("Missing the required parameter 'remappedId' when calling apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiPublicDashboardUuidFieldFieldIdRemappingRemappedIdGet");
      }

      let pathParams = {
        'uuid': uuid,
        'field-id': fieldId,
        'remapped-id': remappedId
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/field/{field-id}/remapping/{remapped-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}/field/{field-id}/search/{search-field-id}
     * Search for values of a Field that is referenced by a Card in a public Dashboard.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} searchFieldId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] value must be an integer greater than zero.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGet(uuid, fieldId, searchFieldId, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'searchFieldId' is set
      if (searchFieldId === undefined || searchFieldId === null) {
        throw new Error("Missing the required parameter 'searchFieldId' when calling apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiPublicDashboardUuidFieldFieldIdSearchSearchFieldIdGet");
      }

      let pathParams = {
        'uuid': uuid,
        'field-id': fieldId,
        'search-field-id': searchFieldId
      };
      let queryParams = {
        'value': value,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/field/{field-id}/search/{search-field-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidFieldFieldIdValuesGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidFieldFieldIdValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}/field/{field-id}/values
     * Fetch FieldValues for a Field that is referenced by a Card in a public Dashboard.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidFieldFieldIdValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidFieldFieldIdValuesGet(uuid, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidFieldFieldIdValuesGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiPublicDashboardUuidFieldFieldIdValuesGet");
      }

      let pathParams = {
        'uuid': uuid,
        'field-id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/field/{field-id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}
     * Fetch a publicly-accessible Dashboard. Does not require auth credentials. Public sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidGet(uuid, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidParamsParamKeySearchQueryGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidParamsParamKeySearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}/params/{param-key}/search/{query}
     * Fetch filter values for dashboard parameter `param-key`, containing specified `query`.
     * @param {String} uuid value must be a valid UUID.
     * @param {String} paramKey value must be a non-blank string.
     * @param {String} query value must be a non-blank string.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidParamsParamKeySearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidParamsParamKeySearchQueryGet(uuid, paramKey, query, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidParamsParamKeySearchQueryGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiPublicDashboardUuidParamsParamKeySearchQueryGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling apiPublicDashboardUuidParamsParamKeySearchQueryGet");
      }

      let pathParams = {
        'uuid': uuid,
        'param-key': paramKey,
        'query': query
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/params/{param-key}/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicDashboardUuidParamsParamKeyValuesGet operation.
     * @callback module:api/ApiPublicApi~apiPublicDashboardUuidParamsParamKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/dashboard/{uuid}/params/{param-key}/values
     * Fetch filter values for dashboard parameter `param-key`.
     * @param {String} uuid value must be a valid UUID.
     * @param {String} paramKey value must be a non-blank string.
     * @param {module:api/ApiPublicApi~apiPublicDashboardUuidParamsParamKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicDashboardUuidParamsParamKeyValuesGet(uuid, paramKey, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicDashboardUuidParamsParamKeyValuesGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiPublicDashboardUuidParamsParamKeyValuesGet");
      }

      let pathParams = {
        'uuid': uuid,
        'param-key': paramKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/dashboard/{uuid}/params/{param-key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicOembedGet operation.
     * @callback module:api/ApiPublicApi~apiPublicOembedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/oembed
     * oEmbed endpoint used to retreive embed code and metadata for a (public) Metabase URL.
     * @param {String} url value must be a non-blank string.
     * @param {Number} maxheight 
     * @param {Number} maxwidth 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] The format param is not used by the API, but is required as part of the oEmbed spec: http://oembed.com/#section2 just return an error if `format` is specified and it's anything other than `json`.
     * @param {module:api/ApiPublicApi~apiPublicOembedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicOembedGet(url, maxheight, maxwidth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling apiPublicOembedGet");
      }
      // verify the required parameter 'maxheight' is set
      if (maxheight === undefined || maxheight === null) {
        throw new Error("Missing the required parameter 'maxheight' when calling apiPublicOembedGet");
      }
      // verify the required parameter 'maxwidth' is set
      if (maxwidth === undefined || maxwidth === null) {
        throw new Error("Missing the required parameter 'maxwidth' when calling apiPublicOembedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'format': opts['format'],
        'maxheight': maxheight,
        'maxwidth': maxwidth
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/oembed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicPivotCardUuidQueryGet operation.
     * @callback module:api/ApiPublicApi~apiPublicPivotCardUuidQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/pivot/card/{uuid}/query
     * Fetch a publicly-accessible Card an return query results as well as `:card` information. Does not require auth    credentials. Public sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {Object} opts Optional parameters
     * @param {String} [parameters] value must be a valid JSON string.
     * @param {module:api/ApiPublicApi~apiPublicPivotCardUuidQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicPivotCardUuidQueryGet(uuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicPivotCardUuidQueryGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/pivot/card/{uuid}/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicPivotDashboardUuidDashcardDashcardIdCardCardIdGet operation.
     * @callback module:api/ApiPublicApi~apiPublicPivotDashboardUuidDashcardDashcardIdCardCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/public/pivot/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}
     * Fetch the results for a Card in a publicly-accessible Dashboard. Does not require auth credentials. Public   sharing must be enabled.
     * @param {String} uuid value must be a valid UUID.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {String} [parameters] value must be a valid JSON string.
     * @param {module:api/ApiPublicApi~apiPublicPivotDashboardUuidDashcardDashcardIdCardCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPublicPivotDashboardUuidDashcardDashcardIdCardCardIdGet(uuid, cardId, dashcardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling apiPublicPivotDashboardUuidDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiPublicPivotDashboardUuidDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiPublicPivotDashboardUuidDashcardDashcardIdCardCardIdGet");
      }

      let pathParams = {
        'uuid': uuid,
        'card-id': cardId,
        'dashcard-id': dashcardId
      };
      let queryParams = {
        'parameters': opts['parameters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/public/pivot/dashboard/{uuid}/dashcard/{dashcard-id}/card/{card-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
