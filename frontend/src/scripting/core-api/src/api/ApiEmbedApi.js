/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ApiEmbed service.
* @module api/ApiEmbedApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiEmbedApi {

    /**
    * Constructs a new ApiEmbedApi. 
    * @alias module:api/ApiEmbedApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}/field/{field-id}/remapping/{remapped-id}
     * Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with   embedded Cards.
     * @param {String} token 
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} remappedId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGet(token, fieldId, remappedId, value, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'remappedId' is set
      if (remappedId === undefined || remappedId === null) {
        throw new Error("Missing the required parameter 'remappedId' when calling apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiEmbedCardTokenFieldFieldIdRemappingRemappedIdGet");
      }

      let pathParams = {
        'token': token,
        'field-id': fieldId,
        'remapped-id': remappedId
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}/field/{field-id}/remapping/{remapped-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}/field/{field-id}/search/{search-field-id}
     * Search for values of a Field that is referenced by an embedded Card.
     * @param {String} token 
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} searchFieldId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] value must be an integer greater than zero.
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGet(token, fieldId, searchFieldId, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'searchFieldId' is set
      if (searchFieldId === undefined || searchFieldId === null) {
        throw new Error("Missing the required parameter 'searchFieldId' when calling apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiEmbedCardTokenFieldFieldIdSearchSearchFieldIdGet");
      }

      let pathParams = {
        'token': token,
        'field-id': fieldId,
        'search-field-id': searchFieldId
      };
      let queryParams = {
        'value': value,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}/field/{field-id}/search/{search-field-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedCardTokenFieldFieldIdValuesGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenFieldFieldIdValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}/field/{field-id}/values
     * Fetch FieldValues for a Field that is referenced by an embedded Card.
     * @param {String} token 
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenFieldFieldIdValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenFieldFieldIdValuesGet(token, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedCardTokenFieldFieldIdValuesGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiEmbedCardTokenFieldFieldIdValuesGet");
      }

      let pathParams = {
        'token': token,
        'field-id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}/field/{field-id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedCardTokenGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}
     * Fetch a Card via a JSON Web Token signed with the `embedding-secret-key`.     Token should have the following format:       {:resource {:question <card-id>}}
     * @param {String} token 
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedCardTokenGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedCardTokenParamsParamKeySearchPrefixGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenParamsParamKeySearchPrefixGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}/params/{param-key}/search/{prefix}
     * Embedded version of chain filter search endpoint.
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenParamsParamKeySearchPrefixGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenParamsParamKeySearchPrefixGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}/params/{param-key}/search/{prefix}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedCardTokenParamsParamKeyValuesGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenParamsParamKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}/params/{param-key}/values
     * Embedded version of api.card filter values endpoint.
     * @param {String} token 
     * @param {String} paramKey 
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenParamsParamKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenParamsParamKeyValuesGet(token, paramKey, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedCardTokenParamsParamKeyValuesGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiEmbedCardTokenParamsParamKeyValuesGet");
      }

      let pathParams = {
        'token': token,
        'param-key': paramKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}/params/{param-key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedCardTokenQueryExportFormatGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenQueryExportFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}/query/{export-format}
     * Like `GET /api/embed/card/query`, but returns the results as a file in the specified format.
     * @param {String} token 
     * @param {module:model/String} exportFormat 
     * @param {Boolean} formatRows 
     * @param {Boolean} pivotResults 
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenQueryExportFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenQueryExportFormatGet(token, exportFormat, formatRows, pivotResults, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedCardTokenQueryExportFormatGet");
      }
      // verify the required parameter 'exportFormat' is set
      if (exportFormat === undefined || exportFormat === null) {
        throw new Error("Missing the required parameter 'exportFormat' when calling apiEmbedCardTokenQueryExportFormatGet");
      }
      // verify the required parameter 'formatRows' is set
      if (formatRows === undefined || formatRows === null) {
        throw new Error("Missing the required parameter 'formatRows' when calling apiEmbedCardTokenQueryExportFormatGet");
      }
      // verify the required parameter 'pivotResults' is set
      if (pivotResults === undefined || pivotResults === null) {
        throw new Error("Missing the required parameter 'pivotResults' when calling apiEmbedCardTokenQueryExportFormatGet");
      }

      let pathParams = {
        'token': token,
        'export-format': exportFormat
      };
      let queryParams = {
        'format_rows': formatRows,
        'pivot_results': pivotResults
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}/query/{export-format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedCardTokenQueryGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedCardTokenQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/card/{token}/query
     * Fetch the results of running a Card using a JSON Web Token signed with the `embedding-secret-key`.     Token should have the following format:       {:resource {:question <card-id>}       :params   <parameters>}
     * @param {String} token 
     * @param {module:api/ApiEmbedApi~apiEmbedCardTokenQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedCardTokenQueryGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedCardTokenQueryGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/card/{token}/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}/{export-format}
     * Fetch the results of running a Card belonging to a Dashboard using a JSON Web Token signed with the   `embedding-secret-key` return the data in one of the export formats
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:model/String} exportFormat 
     * @param {Boolean} formatRows 
     * @param {Boolean} pivotResults 
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGet(dashcardId, cardId, exportFormat, formatRows, pivotResults, callback) {
      let postBody = null;
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGet");
      }
      // verify the required parameter 'exportFormat' is set
      if (exportFormat === undefined || exportFormat === null) {
        throw new Error("Missing the required parameter 'exportFormat' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGet");
      }
      // verify the required parameter 'formatRows' is set
      if (formatRows === undefined || formatRows === null) {
        throw new Error("Missing the required parameter 'formatRows' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGet");
      }
      // verify the required parameter 'pivotResults' is set
      if (pivotResults === undefined || pivotResults === null) {
        throw new Error("Missing the required parameter 'pivotResults' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdExportFormatGet");
      }

      let pathParams = {
        'dashcard-id': dashcardId,
        'card-id': cardId,
        'export-format': exportFormat
      };
      let queryParams = {
        'format_rows': formatRows,
        'pivot_results': pivotResults
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}/{export-format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenDashcardDashcardIdCardCardIdGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenDashcardDashcardIdCardCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}
     * Fetch the results of running a Card belonging to a Dashboard using a JSON Web Token signed with the   `embedding-secret-key`
     * @param {String} token 
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenDashcardDashcardIdCardCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenDashcardDashcardIdCardCardIdGet(token, dashcardId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiEmbedDashboardTokenDashcardDashcardIdCardCardIdGet");
      }

      let pathParams = {
        'token': token,
        'dashcard-id': dashcardId,
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}/field/{field-id}/remapping/{remapped-id}
     * Fetch remapped Field values. This is the same as `GET /api/field/:id/remapping/:remapped-id`, but for use with   embedded Dashboards.
     * @param {String} token 
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} remappedId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGet(token, fieldId, remappedId, value, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'remappedId' is set
      if (remappedId === undefined || remappedId === null) {
        throw new Error("Missing the required parameter 'remappedId' when calling apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiEmbedDashboardTokenFieldFieldIdRemappingRemappedIdGet");
      }

      let pathParams = {
        'token': token,
        'field-id': fieldId,
        'remapped-id': remappedId
      };
      let queryParams = {
        'value': value
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}/field/{field-id}/remapping/{remapped-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}/field/{field-id}/search/{search-field-id}
     * Search for values of a Field that is referenced by a Card in an embedded Dashboard.
     * @param {String} token 
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {Number} searchFieldId value must be an integer greater than zero.
     * @param {String} value value must be a non-blank string.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] value must be an integer greater than zero.
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGet(token, fieldId, searchFieldId, value, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'searchFieldId' is set
      if (searchFieldId === undefined || searchFieldId === null) {
        throw new Error("Missing the required parameter 'searchFieldId' when calling apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGet");
      }
      // verify the required parameter 'value' is set
      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling apiEmbedDashboardTokenFieldFieldIdSearchSearchFieldIdGet");
      }

      let pathParams = {
        'token': token,
        'field-id': fieldId,
        'search-field-id': searchFieldId
      };
      let queryParams = {
        'value': value,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}/field/{field-id}/search/{search-field-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenFieldFieldIdValuesGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenFieldFieldIdValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}/field/{field-id}/values
     * Fetch FieldValues for a Field that is used as a param in an embedded Dashboard.
     * @param {String} token 
     * @param {Number} fieldId value must be an integer greater than zero.
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenFieldFieldIdValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenFieldFieldIdValuesGet(token, fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedDashboardTokenFieldFieldIdValuesGet");
      }
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling apiEmbedDashboardTokenFieldFieldIdValuesGet");
      }

      let pathParams = {
        'token': token,
        'field-id': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}/field/{field-id}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}
     * Fetch a Dashboard via a JSON Web Token signed with the `embedding-secret-key`.     Token should have the following format:       {:resource {:dashboard <dashboard-id>}}
     * @param {String} token 
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedDashboardTokenGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenParamsParamKeySearchPrefixGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenParamsParamKeySearchPrefixGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}/params/{param-key}/search/{prefix}
     * Embedded version of chain filter search endpoint.
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenParamsParamKeySearchPrefixGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenParamsParamKeySearchPrefixGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}/params/{param-key}/search/{prefix}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedDashboardTokenParamsParamKeyValuesGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedDashboardTokenParamsParamKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/dashboard/{token}/params/{param-key}/values
     * Embedded version of chain filter values endpoint.
     * @param {String} token 
     * @param {String} paramKey 
     * @param {module:api/ApiEmbedApi~apiEmbedDashboardTokenParamsParamKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedDashboardTokenParamsParamKeyValuesGet(token, paramKey, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedDashboardTokenParamsParamKeyValuesGet");
      }
      // verify the required parameter 'paramKey' is set
      if (paramKey === undefined || paramKey === null) {
        throw new Error("Missing the required parameter 'paramKey' when calling apiEmbedDashboardTokenParamsParamKeyValuesGet");
      }

      let pathParams = {
        'token': token,
        'param-key': paramKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/dashboard/{token}/params/{param-key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedPivotCardTokenQueryGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedPivotCardTokenQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/pivot/card/{token}/query
     * Fetch the results of running a Card using a JSON Web Token signed with the `embedding-secret-key`.     Token should have the following format:       {:resource {:question <card-id>}       :params   <parameters>}
     * @param {String} token 
     * @param {module:api/ApiEmbedApi~apiEmbedPivotCardTokenQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedPivotCardTokenQueryGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedPivotCardTokenQueryGet");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/pivot/card/{token}/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet operation.
     * @callback module:api/ApiEmbedApi~apiEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}
     * Fetch the results of running a Card belonging to a Dashboard using a JSON Web Token signed with the   `embedding-secret-key`
     * @param {String} token 
     * @param {Number} dashcardId value must be an integer greater than zero.
     * @param {Number} cardId value must be an integer greater than zero.
     * @param {module:api/ApiEmbedApi~apiEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet(token, dashcardId, cardId, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'dashcardId' is set
      if (dashcardId === undefined || dashcardId === null) {
        throw new Error("Missing the required parameter 'dashcardId' when calling apiEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet");
      }
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling apiEmbedPivotDashboardTokenDashcardDashcardIdCardCardIdGet");
      }

      let pathParams = {
        'token': token,
        'dashcard-id': dashcardId,
        'card-id': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/embed/pivot/dashboard/{token}/dashcard/{dashcard-id}/card/{card-id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
