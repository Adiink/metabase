/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ApiTiles service.
* @module api/ApiTilesApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiTilesApi {

    /**
    * Constructs a new ApiTilesApi. 
    * @alias module:api/ApiTilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTilesZoomXYLatFieldLonFieldGet operation.
     * @callback module:api/ApiTilesApi~apiTilesZoomXYLatFieldLonFieldGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/tiles/{zoom}/{x}/{y}/{lat-field}/{lon-field}
     * This endpoints provides an image with the appropriate pins rendered given a MBQL `query` (passed as a GET query   string param). We evaluate the query and find the set of lat/lon pairs which are relevant and then render the   appropriate ones. It's expected that to render a full map view several calls will be made to this endpoint in   parallel.
     * @param {Number} zoom value must be an integer.
     * @param {Number} x value must be an integer.
     * @param {Number} y value must be an integer.
     * @param {String} latField 
     * @param {String} lonField 
     * @param {String} query value must be a valid JSON string.
     * @param {module:api/ApiTilesApi~apiTilesZoomXYLatFieldLonFieldGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTilesZoomXYLatFieldLonFieldGet(zoom, x, y, latField, lonField, query, callback) {
      let postBody = null;
      // verify the required parameter 'zoom' is set
      if (zoom === undefined || zoom === null) {
        throw new Error("Missing the required parameter 'zoom' when calling apiTilesZoomXYLatFieldLonFieldGet");
      }
      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling apiTilesZoomXYLatFieldLonFieldGet");
      }
      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling apiTilesZoomXYLatFieldLonFieldGet");
      }
      // verify the required parameter 'latField' is set
      if (latField === undefined || latField === null) {
        throw new Error("Missing the required parameter 'latField' when calling apiTilesZoomXYLatFieldLonFieldGet");
      }
      // verify the required parameter 'lonField' is set
      if (lonField === undefined || lonField === null) {
        throw new Error("Missing the required parameter 'lonField' when calling apiTilesZoomXYLatFieldLonFieldGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling apiTilesZoomXYLatFieldLonFieldGet");
      }

      let pathParams = {
        'zoom': zoom,
        'x': x,
        'y': y,
        'lat-field': latField,
        'lon-field': lonField
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/tiles/{zoom}/{x}/{y}/{lat-field}/{lon-field}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
