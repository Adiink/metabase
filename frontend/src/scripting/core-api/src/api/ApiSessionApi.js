/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiSessionForgotPasswordPostRequest from '../model/ApiSessionForgotPasswordPostRequest';
import ApiSessionGoogleAuthPostRequest from '../model/ApiSessionGoogleAuthPostRequest';
import ApiSessionPostRequest from '../model/ApiSessionPostRequest';
import ApiSessionResetPasswordPostRequest from '../model/ApiSessionResetPasswordPostRequest';

/**
* ApiSession service.
* @module api/ApiSessionApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiSessionApi {

    /**
    * Constructs a new ApiSessionApi. 
    * @alias module:api/ApiSessionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiSessionDelete operation.
     * @callback module:api/ApiSessionApi~apiSessionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/session/
     * Logout.
     * @param {module:api/ApiSessionApi~apiSessionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSessionDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/session/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSessionForgotPasswordPost operation.
     * @callback module:api/ApiSessionApi~apiSessionForgotPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/session/forgot_password
     * Send a reset email when user has forgotten their password.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSessionForgotPasswordPostRequest} [apiSessionForgotPasswordPostRequest] 
     * @param {module:api/ApiSessionApi~apiSessionForgotPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSessionForgotPasswordPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSessionForgotPasswordPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/session/forgot_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSessionGoogleAuthPost operation.
     * @callback module:api/ApiSessionApi~apiSessionGoogleAuthPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/session/google_auth
     * Login with Google Auth.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSessionGoogleAuthPostRequest} [apiSessionGoogleAuthPostRequest] 
     * @param {module:api/ApiSessionApi~apiSessionGoogleAuthPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSessionGoogleAuthPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSessionGoogleAuthPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/session/google_auth', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSessionPasswordResetTokenValidGet operation.
     * @callback module:api/ApiSessionApi~apiSessionPasswordResetTokenValidGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/session/password_reset_token_valid
     * Check if a password reset token is valid and isn't expired.
     * @param {String} token value must be a non-blank string.
     * @param {module:api/ApiSessionApi~apiSessionPasswordResetTokenValidGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSessionPasswordResetTokenValidGet(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling apiSessionPasswordResetTokenValidGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/session/password_reset_token_valid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSessionPost operation.
     * @callback module:api/ApiSessionApi~apiSessionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/session/
     * Login.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSessionPostRequest} [apiSessionPostRequest] 
     * @param {module:api/ApiSessionApi~apiSessionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSessionPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSessionPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/session/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSessionPropertiesGet operation.
     * @callback module:api/ApiSessionApi~apiSessionPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/session/properties
     * Get all properties and their values. These are the specific `Settings` that are readable by the current user, or are   public if no user is logged in.
     * @param {module:api/ApiSessionApi~apiSessionPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSessionPropertiesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/session/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiSessionResetPasswordPost operation.
     * @callback module:api/ApiSessionApi~apiSessionResetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/session/reset_password
     * Reset password with a reset token.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiSessionResetPasswordPostRequest} [apiSessionResetPasswordPostRequest] 
     * @param {module:api/ApiSessionApi~apiSessionResetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiSessionResetPasswordPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiSessionResetPasswordPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/session/reset_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
