/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiDatabaseIdPutRequest from '../model/ApiDatabaseIdPutRequest';
import ApiDatabasePostRequest from '../model/ApiDatabasePostRequest';
import ApiDatabaseValidatePostRequest from '../model/ApiDatabaseValidatePostRequest';

/**
* ApiDatabase service.
* @module api/ApiDatabaseApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiDatabaseApi {

    /**
    * Constructs a new ApiDatabaseApi. 
    * @alias module:api/ApiDatabaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiDatabaseGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/
     * Fetch all `Databases`.    * `include=tables` means we should hydrate the Tables belonging to each DB. Default: `false`.    * `saved` means we should include the saved questions virtual database. Default: `false`.    * `include_editable_data_model` will only include DBs for which the current user has data model editing     permissions. (If `include=tables`, this also applies to the list of tables in each DB). Should only be used if     Enterprise Edition code is available the advanced-permissions feature is enabled.    * `exclude_uneditable_details` will only include DBs for which the current user can edit the DB details. Has no     effect unless Enterprise Edition code is available and the advanced-permissions feature is enabled.    * `include_only_uploadable` will only include DBs into which Metabase can insert new data.    Independently of these flags, the implementation of [[metabase.models.interface/to-json]] for `:model/Database` in   [[metabase.models.database]] uses the implementation of [[metabase.models.interface/can-write?]] for `:model/Database`   in [[metabase.models.database]] to exclude the `details` field, if the requesting user lacks permission to change the   database details.
     * @param {Object} opts Optional parameters
     * @param {Object} [include] include must be either empty or the value tables
     * @param {Boolean} [includeAnalytics = false)] 
     * @param {Boolean} [saved = false)] 
     * @param {Boolean} [includeEditableDataModel = false)] 
     * @param {Boolean} [excludeUneditableDetails = false)] 
     * @param {Boolean} [includeOnlyUploadable = false)] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'include': opts['include'],
        'include_analytics': opts['includeAnalytics'],
        'saved': opts['saved'],
        'include_editable_data_model': opts['includeEditableDataModel'],
        'exclude_uneditable_details': opts['excludeUneditableDetails'],
        'include_only_uploadable': opts['includeOnlyUploadable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdAutocompleteSuggestionsGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdAutocompleteSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/autocomplete_suggestions
     * Return a list of autocomplete suggestions for a given `prefix`, or `substring`. Should only specify one, but   `substring` will have priority if both are present.    This is intended for use with the ACE Editor when the User is typing raw SQL. Suggestions include matching `Tables`   and `Fields` in this `Database`.    Tables are returned in the format `[table_name \"Table\"]`;   When Fields have a semantic_type, they are returned in the format `[field_name \"table_name base_type semantic_type\"]`   When Fields lack a semantic_type, they are returned in the format `[field_name \"table_name base_type\"]`
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {String} [prefix] value must be a non-blank string.
     * @param {String} [substring] value must be a non-blank string.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdAutocompleteSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdAutocompleteSuggestionsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdAutocompleteSuggestionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'prefix': opts['prefix'],
        'substring': opts['substring']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/autocomplete_suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdCardAutocompleteSuggestionsGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdCardAutocompleteSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/card_autocomplete_suggestions
     * Return a list of `Card` autocomplete suggestions for a given `query` in a given `Database`.    This is intended for use with the ACE Editor when the User is typing in a template tag for a `Card`, e.g. {{#...}}.
     * @param {Number} id value must be an integer greater than zero.
     * @param {String} query value must be a non-blank string.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeDashboardQuestions] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdCardAutocompleteSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdCardAutocompleteSuggestionsGet(id, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdCardAutocompleteSuggestionsGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling apiDatabaseIdCardAutocompleteSuggestionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': query,
        'include_dashboard_questions': opts['includeDashboardQuestions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/card_autocomplete_suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdDelete operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/database/{id}
     * Delete a `Database`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdDiscardValuesPost operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdDiscardValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/database/{id}/discard_values
     * Discards all saved field values for this `Database`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdDiscardValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdDiscardValuesPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdDiscardValuesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/discard_values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdDismissSpinnerPost operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdDismissSpinnerPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/database/{id}/dismiss_spinner
     * Manually set the initial sync status of the `Database` and corresponding   tables to be `complete` (see #20863)
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdDismissSpinnerPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdDismissSpinnerPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdDismissSpinnerPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/dismiss_spinner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdFieldsGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/fields
     * Get a list of all `Fields` in `Database`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdFieldsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdFieldsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}
     * Get a single Database with `id`. Optionally pass `?include=tables` or `?include=tables.fields` to include the Tables    belonging to this database, or the Tables and Fields, respectively.  If the requestor has write permissions for the DB    (i.e. is an admin or has data model permissions), then certain inferred secret values will also be included in the    returned details (see [[metabase.models.secret/expand-db-details-inferred-secret-values]] for full details).     Passing include_editable_data_model will only return tables for which the current user has data model editing    permissions, if Enterprise Edition code is available and a token with the advanced-permissions feature is present.    In addition, if the user has no data access for the DB (aka block permissions), it will return only the DB name, ID    and tables, with no additional metadata.     Independently of these flags, the implementation of [[metabase.models.interface/to-json]] for `:model/Database` in    [[metabase.models.database]] uses the implementation of [[metabase.models.interface/can-write?]] for `:model/Database`    in [[metabase.models.database]] to exclude the `details` field, if the requesting user lacks permission to change the    database details.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [include] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdIdfieldsGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdIdfieldsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/idfields
     * Get a list of all primary key `Fields` for `Database`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdIdfieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdIdfieldsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdIdfieldsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/idfields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdMetadataGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/metadata
     * Get metadata about a `Database`, including all of its `Tables` and `Fields`. Returns DB, fields, and field values.   By default only non-hidden tables and fields are returned. Passing include_hidden=true includes them.    Passing include_editable_data_model will only return tables for which the current user has data model editing   permissions, if Enterprise Edition code is available and a token with the advanced-permissions feature is present.   In addition, if the user has no data access for the DB (aka block permissions), it will return only the DB name, ID   and tables, with no additional metadata.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeHidden = false)] 
     * @param {Boolean} [includeEditableDataModel = false)] 
     * @param {Boolean} [removeInactive = false)] 
     * @param {Boolean} [skipFields = false)] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdMetadataGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdMetadataGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_hidden': opts['includeHidden'],
        'include_editable_data_model': opts['includeEditableDataModel'],
        'remove_inactive': opts['removeInactive'],
        'skip_fields': opts['skipFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdPut operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/database/{id}
     * Update a `Database`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDatabaseIdPutRequest} [apiDatabaseIdPutRequest] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDatabaseIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdRescanValuesPost operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdRescanValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/database/{id}/rescan_values
     * Trigger a manual scan of the field values for this `Database`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdRescanValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdRescanValuesPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdRescanValuesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/rescan_values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdSchemaGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdSchemaGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/schema/
     * Return a list of Tables for a Database whose `schema` is `nil` or an empty string.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeHidden = false)] 
     * @param {Boolean} [includeEditableDataModel = false)] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdSchemaGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdSchemaGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdSchemaGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_hidden': opts['includeHidden'],
        'include_editable_data_model': opts['includeEditableDataModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/schema/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdSchemaSchemaGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdSchemaSchemaGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/schema/{schema}
     * Returns a list of Tables for the given Database `id` and `schema`
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeHidden = false)] 
     * @param {Boolean} [includeEditableDataModel = false)] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdSchemaSchemaGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdSchemaSchemaGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdSchemaSchemaGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_hidden': opts['includeHidden'],
        'include_editable_data_model': opts['includeEditableDataModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/schema/{schema}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdSchemasGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdSchemasGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/schemas
     * Returns a list of all the schemas with tables found for the database `id`. Excludes schemas with no tables.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeEditableDataModel = false)] 
     * @param {Boolean} [includeHidden = false)] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdSchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdSchemasGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdSchemasGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_editable_data_model': opts['includeEditableDataModel'],
        'include_hidden': opts['includeHidden']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdSyncSchemaPost operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdSyncSchemaPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/database/{id}/sync_schema
     * Trigger a manual update of the schema metadata for this `Database`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdSyncSchemaPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdSyncSchemaPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdSyncSchemaPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/sync_schema', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdSyncableSchemasGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdSyncableSchemasGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/syncable_schemas
     * Returns a list of all syncable schemas found for the database `id`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdSyncableSchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdSyncableSchemasGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdSyncableSchemasGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/syncable_schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseIdUsageInfoGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseIdUsageInfoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{id}/usage_info
     * Get usage info for a database.   Returns a map with keys are models and values are the number of entities that use this database.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiDatabaseApi~apiDatabaseIdUsageInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseIdUsageInfoGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDatabaseIdUsageInfoGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{id}/usage_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabasePost operation.
     * @callback module:api/ApiDatabaseApi~apiDatabasePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/database/
     * Add a new `Database`.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDatabasePostRequest} [apiDatabasePostRequest] 
     * @param {module:api/ApiDatabaseApi~apiDatabasePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabasePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDatabasePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseSampleDatabasePost operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseSampleDatabasePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/database/sample_database
     * Add the sample database as a new `Database`.
     * @param {module:api/ApiDatabaseApi~apiDatabaseSampleDatabasePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseSampleDatabasePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/sample_database', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseValidatePost operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseValidatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/database/validate
     * Validate that we can connect to a database given a set of details.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiDatabaseValidatePostRequest} [apiDatabaseValidatePostRequest] 
     * @param {module:api/ApiDatabaseApi~apiDatabaseValidatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseValidatePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiDatabaseValidatePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseVirtualDbDatasetsGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseVirtualDbDatasetsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{virtual-db}/datasets
     * Returns a list of all the datasets found for the saved questions virtual database.
     * @param {module:api/ApiDatabaseApi~apiDatabaseVirtualDbDatasetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseVirtualDbDatasetsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{virtual-db}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseVirtualDbDatasetsSchemaGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseVirtualDbDatasetsSchemaGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{virtual-db}/datasets/{schema}
     * Returns a list of Tables for the datasets virtual database.
     * @param {module:api/ApiDatabaseApi~apiDatabaseVirtualDbDatasetsSchemaGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseVirtualDbDatasetsSchemaGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{virtual-db}/datasets/{schema}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseVirtualDbMetadataGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseVirtualDbMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{virtual-db}/metadata
     * Endpoint that provides metadata for the Saved Questions 'virtual' database. Used for fooling the frontend    and allowing it to treat the Saved Questions virtual DB just like any other database.
     * @param {module:api/ApiDatabaseApi~apiDatabaseVirtualDbMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseVirtualDbMetadataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{virtual-db}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseVirtualDbSchemaSchemaGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseVirtualDbSchemaSchemaGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{virtual-db}/schema/{schema}
     * Returns a list of Tables for the saved questions virtual database.
     * @param {module:api/ApiDatabaseApi~apiDatabaseVirtualDbSchemaSchemaGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseVirtualDbSchemaSchemaGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{virtual-db}/schema/{schema}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDatabaseVirtualDbSchemasGet operation.
     * @callback module:api/ApiDatabaseApi~apiDatabaseVirtualDbSchemasGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/database/{virtual-db}/schemas
     * Returns a list of all the schemas found for the saved questions virtual database.
     * @param {module:api/ApiDatabaseApi~apiDatabaseVirtualDbSchemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiDatabaseVirtualDbSchemasGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/database/{virtual-db}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
