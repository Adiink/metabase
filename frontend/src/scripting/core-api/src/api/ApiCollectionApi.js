/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCollectionGraphPutRequest from '../model/ApiCollectionGraphPutRequest';
import ApiCollectionIdMoveDashboardQuestionCandidatesPostRequest from '../model/ApiCollectionIdMoveDashboardQuestionCandidatesPostRequest';
import ApiCollectionIdPutRequest from '../model/ApiCollectionIdPutRequest';
import ApiCollectionPostRequest from '../model/ApiCollectionPostRequest';
import ApiCollectionRootMoveDashboardQuestionCandidatesPostRequest from '../model/ApiCollectionRootMoveDashboardQuestionCandidatesPostRequest';

/**
* ApiCollection service.
* @module api/ApiCollectionApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiCollectionApi {

    /**
    * Constructs a new ApiCollectionApi. 
    * @alias module:api/ApiCollectionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiCollectionGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/
     * Fetch a list of all Collections that the current user has read permissions for (`:can_write` is returned as an   additional property of each Collection so you can tell which of these you have write permissions for.)    By default, this returns non-archived Collections, but instead you can show archived ones by passing   `?archived=true`.    By default, admin users will see all collections. To hide other user's collections pass in   `?exclude-other-user-collections=true`.    If personal-only is `true`, then return only personal collections where `personal_owner_id` is not `nil`.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [archived = false)] 
     * @param {Boolean} [excludeOtherUserCollections = false)] 
     * @param {String} [namespace] value must be a non-blank string.
     * @param {Boolean} [personalOnly = false)] 
     * @param {module:api/ApiCollectionApi~apiCollectionGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'archived': opts['archived'],
        'exclude-other-user-collections': opts['excludeOtherUserCollections'],
        'namespace': opts['namespace'],
        'personal-only': opts['personalOnly']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionGraphGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionGraphGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/graph
     * Fetch a graph of all Collection Permissions.
     * @param {Object} opts Optional parameters
     * @param {String} [namespace] value must be a non-blank string.
     * @param {module:api/ApiCollectionApi~apiCollectionGraphGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionGraphGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'namespace': opts['namespace']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/graph', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionGraphPut operation.
     * @callback module:api/ApiCollectionApi~apiCollectionGraphPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/collection/graph
     * Do a batch update of Collections Permissions by passing in a modified graph. Will overwrite parts of the graph that   are present in the request, and leave the rest unchanged.    If the `force` query parameter is `true`, a `revision` number is not required. The provided graph will be persisted   as-is, and has the potential to clobber other writes that happened since the last read.    If the `skip_graph` query parameter is `true`, it will only return the current revision, not the entire permissions   graph.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [force = false)] 
     * @param {Boolean} [skipGraph = false)] 
     * @param {module:model/ApiCollectionGraphPutRequest} [apiCollectionGraphPutRequest] 
     * @param {module:api/ApiCollectionApi~apiCollectionGraphPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionGraphPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCollectionGraphPutRequest'];

      let pathParams = {
      };
      let queryParams = {
        'force': opts['force'],
        'skip-graph': opts['skipGraph']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/graph', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionIdDashboardQuestionCandidatesGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionIdDashboardQuestionCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/{id}/dashboard-question-candidates
     * Find cards in this collection that can be moved into dashboards in this collection.    To be eligible, a card must only appear in one dashboard (which is also in this collection), and must not already be a   dashboard question.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiCollectionApi~apiCollectionIdDashboardQuestionCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionIdDashboardQuestionCandidatesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCollectionIdDashboardQuestionCandidatesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/{id}/dashboard-question-candidates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionIdGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/{id}
     * Fetch a specific Collection with standard details added
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiCollectionApi~apiCollectionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCollectionIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionIdItemsGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionIdItemsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/{id}/items
     * Fetch a specific Collection's items with the following options:    *  `models` - only include objects of a specific set of `models`. If unspecified, returns objects of all models   *  `archived` - when `true`, return archived objects *instead* of unarchived ones. Defaults to `false`.   *  `pinned_state` - when `is_pinned`, return pinned objects only.                    when `is_not_pinned`, return non pinned objects only.                    when `all`, return everything. By default returns everything.    Note that this endpoint should return results in a similar shape to `/api/dashboard/:id/items`, so if this is   changed, that should too.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [models] 
     * @param {Boolean} [archived = false)] 
     * @param {module:model/String} [pinnedState] 
     * @param {module:model/String} [sortColumn] 
     * @param {module:model/String} [sortDirection] 
     * @param {Boolean} [officialCollectionsFirst] 
     * @param {Boolean} [showDashboardQuestions = false)] 
     * @param {module:api/ApiCollectionApi~apiCollectionIdItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionIdItemsGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCollectionIdItemsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'models': this.apiClient.buildCollectionParam(opts['models'], 'multi'),
        'archived': opts['archived'],
        'pinned_state': opts['pinnedState'],
        'sort_column': opts['sortColumn'],
        'sort_direction': opts['sortDirection'],
        'official_collections_first': opts['officialCollectionsFirst'],
        'show_dashboard_questions': opts['showDashboardQuestions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionIdMoveDashboardQuestionCandidatesPost operation.
     * @callback module:api/ApiCollectionApi~apiCollectionIdMoveDashboardQuestionCandidatesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/collection/{id}/move-dashboard-question-candidates
     * Move candidate cards to the dashboards they appear in.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCollectionIdMoveDashboardQuestionCandidatesPostRequest} [apiCollectionIdMoveDashboardQuestionCandidatesPostRequest] 
     * @param {module:api/ApiCollectionApi~apiCollectionIdMoveDashboardQuestionCandidatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionIdMoveDashboardQuestionCandidatesPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCollectionIdMoveDashboardQuestionCandidatesPostRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCollectionIdMoveDashboardQuestionCandidatesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/{id}/move-dashboard-question-candidates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionIdPut operation.
     * @callback module:api/ApiCollectionApi~apiCollectionIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/collection/{id}
     * Modify an existing Collection, including archiving or unarchiving it, or moving it.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCollectionIdPutRequest} [apiCollectionIdPutRequest] 
     * @param {module:api/ApiCollectionApi~apiCollectionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCollectionIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiCollectionIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionPost operation.
     * @callback module:api/ApiCollectionApi~apiCollectionPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/collection/
     * Create a new Collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCollectionPostRequest} [apiCollectionPostRequest] 
     * @param {module:api/ApiCollectionApi~apiCollectionPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCollectionPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionRootDashboardQuestionCandidatesGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionRootDashboardQuestionCandidatesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/root/dashboard-question-candidates
     * Find cards in the root collection that can be moved into dashboards in the root collection. (Same as the above   endpoint, but for the root collection)
     * @param {module:api/ApiCollectionApi~apiCollectionRootDashboardQuestionCandidatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionRootDashboardQuestionCandidatesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/root/dashboard-question-candidates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionRootGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionRootGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/root
     * Return the 'Root' Collection object with standard details added
     * @param {Object} opts Optional parameters
     * @param {String} [namespace] value must be a non-blank string.
     * @param {module:api/ApiCollectionApi~apiCollectionRootGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionRootGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'namespace': opts['namespace']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/root', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionRootItemsGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionRootItemsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/root/items
     * Fetch objects that the current user should see at their root level. As mentioned elsewhere, the 'Root' Collection   doesn't actually exist as a row in the application DB: it's simply a virtual Collection where things with no   `collection_id` exist. It does, however, have its own set of Permissions.    This endpoint will actually show objects with no `collection_id` for Users that have Root Collection   permissions, but for people without Root Collection perms, we'll just show the objects that have an effective   location of `/`.    This endpoint is intended to power a 'Root Folder View' for the Current User, so regardless you'll see all the   top-level objects you're allowed to access.    By default, this will show the 'normal' Collections namespace; to view a different Collections namespace, such as   `snippets`, you can pass the `?namespace=` parameter.    Note that this endpoint should return results in a similar shape to `/api/dashboard/:id/items`, so if this is   changed, that should too.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [models] 
     * @param {Boolean} [archived = false)] 
     * @param {String} [namespace] value must be a non-blank string.
     * @param {module:model/String} [pinnedState] 
     * @param {module:model/String} [sortColumn] 
     * @param {module:model/String} [sortDirection] 
     * @param {Boolean} [officialCollectionsFirst] 
     * @param {Boolean} [showDashboardQuestions] 
     * @param {module:api/ApiCollectionApi~apiCollectionRootItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionRootItemsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'models': this.apiClient.buildCollectionParam(opts['models'], 'multi'),
        'archived': opts['archived'],
        'namespace': opts['namespace'],
        'pinned_state': opts['pinnedState'],
        'sort_column': opts['sortColumn'],
        'sort_direction': opts['sortDirection'],
        'official_collections_first': opts['officialCollectionsFirst'],
        'show_dashboard_questions': opts['showDashboardQuestions']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/root/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionRootMoveDashboardQuestionCandidatesPost operation.
     * @callback module:api/ApiCollectionApi~apiCollectionRootMoveDashboardQuestionCandidatesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/collection/root/move-dashboard-question-candidates
     * Move candidate cards to the dashboards they appear in (for the root collection)
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiCollectionRootMoveDashboardQuestionCandidatesPostRequest} [apiCollectionRootMoveDashboardQuestionCandidatesPostRequest] 
     * @param {module:api/ApiCollectionApi~apiCollectionRootMoveDashboardQuestionCandidatesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionRootMoveDashboardQuestionCandidatesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiCollectionRootMoveDashboardQuestionCandidatesPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/root/move-dashboard-question-candidates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionTrashGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionTrashGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/trash
     * Fetch the trash collection, as in `/api/collection/:trash-id`
     * @param {module:api/ApiCollectionApi~apiCollectionTrashGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionTrashGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/trash', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiCollectionTreeGet operation.
     * @callback module:api/ApiCollectionApi~apiCollectionTreeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/collection/tree
     * Similar to `GET /`, but returns Collections in a tree structure, e.g.    ```   [{:name     \"A\"   :below    #{:card :dataset}   :children [{:name \"B\"}              {:name     \"C\"               :here     #{:dataset :card}               :below    #{:dataset :card}               :children [{:name     \"D\"                           :here     #{:dataset}                           :children [{:name \"E\"}]}                          {:name     \"F\"                           :here     #{:card}                           :children [{:name \"G\"}]}]}]}   {:name \"H\"}]   ```    The here and below keys indicate the types of items at this particular level of the tree (here) and in its   subtree (below).    TODO: for historical reasons this returns Saved Questions AS 'card' AND Models as 'dataset'; we should fix this at   some point in the future.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [excludeArchived = false)] 
     * @param {Boolean} [excludeOtherUserCollections = false)] 
     * @param {String} [namespace] value must be a non-blank string.
     * @param {Boolean} [shallow = false)] 
     * @param {Number} [collectionId] value must be an integer greater than zero.
     * @param {module:api/ApiCollectionApi~apiCollectionTreeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiCollectionTreeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'exclude-archived': opts['excludeArchived'],
        'exclude-other-user-collections': opts['excludeOtherUserCollections'],
        'namespace': opts['namespace'],
        'shallow': opts['shallow'],
        'collection-id': opts['collectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/collection/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
