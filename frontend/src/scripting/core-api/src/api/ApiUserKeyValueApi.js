/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiUserKeyValueNamespaceNamespaceKeyKeyPutRequest from '../model/ApiUserKeyValueNamespaceNamespaceKeyKeyPutRequest';

/**
* ApiUserKeyValue service.
* @module api/ApiUserKeyValueApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiUserKeyValueApi {

    /**
    * Constructs a new ApiUserKeyValueApi. 
    * @alias module:api/ApiUserKeyValueApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiUserKeyValueNamespaceNamespaceGet operation.
     * @callback module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/user-key-value/namespace/{namespace}
     * Returns all KV pairs in a given namespace for the current user
     * @param {String} namespace value must be a non-blank string.
     * @param {module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserKeyValueNamespaceNamespaceGet(namespace, callback) {
      let postBody = null;
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling apiUserKeyValueNamespaceNamespaceGet");
      }

      let pathParams = {
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user-key-value/namespace/{namespace}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserKeyValueNamespaceNamespaceKeyKeyDelete operation.
     * @callback module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceKeyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/user-key-value/namespace/{namespace}/key/{key}
     * Deletes a KV-pair for the user
     * @param {module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceKeyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserKeyValueNamespaceNamespaceKeyKeyDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user-key-value/namespace/{namespace}/key/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserKeyValueNamespaceNamespaceKeyKeyGet operation.
     * @callback module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceKeyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/user-key-value/namespace/{namespace}/key/{key}
     * Get a value for the user
     * @param {String} key value must be a non-blank string.
     * @param {String} namespace value must be a non-blank string.
     * @param {module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceKeyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserKeyValueNamespaceNamespaceKeyKeyGet(key, namespace, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiUserKeyValueNamespaceNamespaceKeyKeyGet");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling apiUserKeyValueNamespaceNamespaceKeyKeyGet");
      }

      let pathParams = {
        'key': key,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user-key-value/namespace/{namespace}/key/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserKeyValueNamespaceNamespaceKeyKeyPut operation.
     * @callback module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceKeyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/user-key-value/namespace/{namespace}/key/{key}
     * Upsert a KV-pair for the user
     * @param {String} key value must be a non-blank string.
     * @param {String} namespace value must be a non-blank string.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiUserKeyValueNamespaceNamespaceKeyKeyPutRequest} [apiUserKeyValueNamespaceNamespaceKeyKeyPutRequest] 
     * @param {module:api/ApiUserKeyValueApi~apiUserKeyValueNamespaceNamespaceKeyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserKeyValueNamespaceNamespaceKeyKeyPut(key, namespace, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUserKeyValueNamespaceNamespaceKeyKeyPutRequest'];
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiUserKeyValueNamespaceNamespaceKeyKeyPut");
      }
      // verify the required parameter 'namespace' is set
      if (namespace === undefined || namespace === null) {
        throw new Error("Missing the required parameter 'namespace' when calling apiUserKeyValueNamespaceNamespaceKeyKeyPut");
      }

      let pathParams = {
        'key': key,
        'namespace': namespace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user-key-value/namespace/{namespace}/key/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
