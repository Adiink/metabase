/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiCardFromCsvPostRequestFile from '../model/ApiCardFromCsvPostRequestFile';
import ApiTableIdPutRequest from '../model/ApiTableIdPutRequest';
import ApiTablePutRequest from '../model/ApiTablePutRequest';

/**
* ApiTable service.
* @module api/ApiTableApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiTableApi {

    /**
    * Constructs a new ApiTableApi. 
    * @alias module:api/ApiTableApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiTableCardIdFksGet operation.
     * @callback module:api/ApiTableApi~apiTableCardIdFksGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/table/card__:id/fks
     * Return FK info for the 'virtual' table for a Card. This is always empty, so this endpoint    serves mainly as a placeholder to avoid having to change anything on the frontend.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiTableApi~apiTableCardIdFksGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableCardIdFksGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableCardIdFksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/card__:id/fks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableCardIdQueryMetadataGet operation.
     * @callback module:api/ApiTableApi~apiTableCardIdQueryMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/table/card__:id/query_metadata
     * Return metadata for the 'virtual' table for a Card.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiTableApi~apiTableCardIdQueryMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableCardIdQueryMetadataGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableCardIdQueryMetadataGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/card__:id/query_metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableGet operation.
     * @callback module:api/ApiTableApi~apiTableGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/table/
     * Get all `Tables`.
     * @param {module:api/ApiTableApi~apiTableGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdAppendCsvPost operation.
     * @callback module:api/ApiTableApi~apiTableIdAppendCsvPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/table/{id}/append-csv
     * Inserts the rows of an uploaded CSV file into the table identified by `:id`. The table must have been created by   uploading a CSV file.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:model/ApiCardFromCsvPostRequestFile} file 
     * @param {module:api/ApiTableApi~apiTableIdAppendCsvPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdAppendCsvPost(id, file, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdAppendCsvPost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiTableIdAppendCsvPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/append-csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdDiscardValuesPost operation.
     * @callback module:api/ApiTableApi~apiTableIdDiscardValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/table/{id}/discard_values
     * Discard the FieldValues belonging to the Fields in this Table. Only applies to fields that have FieldValues. If    this Table's Database is set up to automatically sync FieldValues, they will be recreated during the next cycle.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiTableApi~apiTableIdDiscardValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdDiscardValuesPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdDiscardValuesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/discard_values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdFieldsOrderPut operation.
     * @callback module:api/ApiTableApi~apiTableIdFieldsOrderPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/table/{id}/fields/order
     * Reorder fields
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} [requestBody] 
     * @param {module:api/ApiTableApi~apiTableIdFieldsOrderPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdFieldsOrderPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['requestBody'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdFieldsOrderPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/fields/order', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdFksGet operation.
     * @callback module:api/ApiTableApi~apiTableIdFksGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/table/{id}/fks
     * Get all foreign keys whose destination is a `Field` that belongs to this `Table`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiTableApi~apiTableIdFksGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdFksGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdFksGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/fks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdGet operation.
     * @callback module:api/ApiTableApi~apiTableIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/table/{id}
     * Get `Table` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeEditableDataModel] 
     * @param {module:api/ApiTableApi~apiTableIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_editable_data_model': opts['includeEditableDataModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdPut operation.
     * @callback module:api/ApiTableApi~apiTableIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/table/{id}
     * Update `Table` with ID.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTableIdPutRequest} [apiTableIdPutRequest] 
     * @param {module:api/ApiTableApi~apiTableIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiTableIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdQueryMetadataGet operation.
     * @callback module:api/ApiTableApi~apiTableIdQueryMetadataGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/table/{id}/query_metadata
     * Get metadata about a `Table` useful for running queries.    Returns DB, fields, field FKs, and field values.     Passing `include_hidden_fields=true` will include any hidden `Fields` in the response. Defaults to `false`    Passing `include_sensitive_fields=true` will include any sensitive `Fields` in the response. Defaults to `false`.     Passing `include_editable_data_model=true` will check that the current user has write permissions for the table's    data model, while `false` checks that they have data access perms for the table. Defaults to `false`.     These options are provided for use in the Admin Edit Metadata page.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeSensitiveFields = false)] 
     * @param {Boolean} [includeHiddenFields = false)] 
     * @param {Boolean} [includeEditableDataModel = false)] 
     * @param {module:api/ApiTableApi~apiTableIdQueryMetadataGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdQueryMetadataGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdQueryMetadataGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'include_sensitive_fields': opts['includeSensitiveFields'],
        'include_hidden_fields': opts['includeHiddenFields'],
        'include_editable_data_model': opts['includeEditableDataModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/query_metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdRelatedGet operation.
     * @callback module:api/ApiTableApi~apiTableIdRelatedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/table/{id}/related
     * Return related entities.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiTableApi~apiTableIdRelatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdRelatedGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdRelatedGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdReplaceCsvPost operation.
     * @callback module:api/ApiTableApi~apiTableIdReplaceCsvPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/table/{id}/replace-csv
     * Replaces the contents of the table identified by `:id` with the rows of an uploaded CSV file. The table must have   been created by uploading a CSV file.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:model/ApiCardFromCsvPostRequestFile} file 
     * @param {module:api/ApiTableApi~apiTableIdReplaceCsvPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdReplaceCsvPost(id, file, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdReplaceCsvPost");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling apiTableIdReplaceCsvPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/replace-csv', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTableIdRescanValuesPost operation.
     * @callback module:api/ApiTableApi~apiTableIdRescanValuesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/table/{id}/rescan_values
     * Manually trigger an update for the FieldValues for the Fields belonging to this Table. Only applies to Fields that    are eligible for FieldValues.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiTableApi~apiTableIdRescanValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTableIdRescanValuesPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTableIdRescanValuesPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/{id}/rescan_values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTablePut operation.
     * @callback module:api/ApiTableApi~apiTablePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/table/
     * Update all `Table` in `ids`.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiTablePutRequest} [apiTablePutRequest] 
     * @param {module:api/ApiTableApi~apiTablePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiTablePut(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiTablePutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/table/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
