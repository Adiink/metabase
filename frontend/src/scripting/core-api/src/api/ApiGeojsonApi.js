/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ApiGeojson service.
* @module api/ApiGeojsonApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiGeojsonApi {

    /**
    * Constructs a new ApiGeojsonApi. 
    * @alias module:api/ApiGeojsonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiGeojsonGet operation.
     * @callback module:api/ApiGeojsonApi~apiGeojsonGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/geojson/
     * Load a custom GeoJSON file based on a URL or file path provided as a query parameter.   This behaves similarly to /api/geojson/:key but doesn't require the custom map to be saved to the DB first.
     * @param {String} url value must be a non-blank string.
     * @param {module:api/ApiGeojsonApi~apiGeojsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiGeojsonGet(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling apiGeojsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/geojson/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiGeojsonKeyGet operation.
     * @callback module:api/ApiGeojsonApi~apiGeojsonKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/geojson/{key}
     * Fetch a custom GeoJSON file as defined in the `custom-geojson` setting. (This just acts as a simple proxy for the   file specified for `key`).
     * @param {String} key value must be a non-blank string.
     * @param {module:api/ApiGeojsonApi~apiGeojsonKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiGeojsonKeyGet(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling apiGeojsonKeyGet");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/geojson/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
