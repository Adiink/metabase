/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiUserIdPasswordPutRequest from '../model/ApiUserIdPasswordPutRequest';
import ApiUserIdPutRequest from '../model/ApiUserIdPutRequest';
import ApiUserPostRequest from '../model/ApiUserPostRequest';

/**
* ApiUser service.
* @module api/ApiUserApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiUserApi {

    /**
    * Constructs a new ApiUserApi. 
    * @alias module:api/ApiUserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiUserCurrentGet operation.
     * @callback module:api/ApiUserApi~apiUserCurrentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/user/current
     * Fetch the current `User`.
     * @param {module:api/ApiUserApi~apiUserCurrentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserCurrentGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserGet operation.
     * @callback module:api/ApiUserApi~apiUserGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/user/
     * Fetch a list of `Users` for admins or group managers.   By default returns only active users for admins and only active users within groups that the group manager is managing for group managers.     - If `status` is `deactivated`, include deactivated users only.    - If `status` is `all`, include all users (active and inactive).    - Also supports `include_deactivated`, which if true, is equivalent to `status=all`; If is false, is equivalent to `status=active`.    `status` and `include_deactivated` requires superuser permissions.    - `include_deactivated` is a legacy alias for `status` and will be removed in a future release, users are advised to use `status` for better support and flexibility.    If both params are passed, `status` takes precedence.    For users with segmented permissions, return only themselves.    Takes `limit`, `offset` for pagination.   Takes `query` for filtering on first name, last name, email.   Also takes `group_id`, which filters on group id.
     * @param {Object} opts Optional parameters
     * @param {String} [status] 
     * @param {String} [query] 
     * @param {Number} [groupId] value must be an integer greater than zero.
     * @param {Boolean} [includeDeactivated = false)] 
     * @param {module:api/ApiUserApi~apiUserGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'query': opts['query'],
        'group_id': opts['groupId'],
        'include_deactivated': opts['includeDeactivated']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserIdDelete operation.
     * @callback module:api/ApiUserApi~apiUserIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/user/{id}
     * Disable a `User`.  This does not remove the `User` from the DB, but instead disables their account.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiUserApi~apiUserIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserIdGet operation.
     * @callback module:api/ApiUserApi~apiUserIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/user/{id}
     * Fetch a `User`. You must be fetching yourself *or* be a superuser *or* a Group Manager.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiUserApi~apiUserIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserIdModalModalPut operation.
     * @callback module:api/ApiUserApi~apiUserIdModalModalPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/user/{id}/modal/{modal}
     * Indicate that a user has been informed about the vast intricacies of 'the' Query Builder.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiUserApi~apiUserIdModalModalPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserIdModalModalPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserIdModalModalPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/{id}/modal/{modal}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserIdPasswordPut operation.
     * @callback module:api/ApiUserApi~apiUserIdPasswordPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/user/{id}/password
     * Update a user's password.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiUserIdPasswordPutRequest} [apiUserIdPasswordPutRequest] 
     * @param {module:api/ApiUserApi~apiUserIdPasswordPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserIdPasswordPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUserIdPasswordPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserIdPasswordPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/{id}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserIdPut operation.
     * @callback module:api/ApiUserApi~apiUserIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/user/{id}
     * Update an existing, active `User`.   Self or superusers can update user info and groups.   Group Managers can only add/remove users from groups they are manager of.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiUserIdPutRequest} [apiUserIdPutRequest] 
     * @param {module:api/ApiUserApi~apiUserIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUserIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserIdReactivatePut operation.
     * @callback module:api/ApiUserApi~apiUserIdReactivatePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/user/{id}/reactivate
     * Reactivate user at `:id`
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiUserApi~apiUserIdReactivatePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserIdReactivatePut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiUserIdReactivatePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/{id}/reactivate', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserPost operation.
     * @callback module:api/ApiUserApi~apiUserPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/user/
     * Create a new `User`, return a 400 if the email address is already taken
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiUserPostRequest} [apiUserPostRequest] 
     * @param {module:api/ApiUserApi~apiUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUserPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiUserRecipientsGet operation.
     * @callback module:api/ApiUserApi~apiUserRecipientsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/user/recipients
     * Fetch a list of `Users`. Returns only active users. Meant for non-admins unlike GET /api/user.     - If user-visibility is :all or the user is an admin, include all users.    - If user-visibility is :group, include only users in the same group (excluding the all users group).    - If user-visibility is :none or the user is sandboxed, include only themselves.
     * @param {module:api/ApiUserApi~apiUserRecipientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiUserRecipientsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/user/recipients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
