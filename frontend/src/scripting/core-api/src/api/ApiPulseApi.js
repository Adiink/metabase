/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiPulseIdPutRequest from '../model/ApiPulseIdPutRequest';
import ApiPulsePostRequest from '../model/ApiPulsePostRequest';
import ApiPulseTestPostRequest from '../model/ApiPulseTestPostRequest';

/**
* ApiPulse service.
* @module api/ApiPulseApi
* @version v1.53.2-SNAPSHOT
*/
export default class ApiPulseApi {

    /**
    * Constructs a new ApiPulseApi. 
    * @alias module:api/ApiPulseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiPulseFormInputGet operation.
     * @callback module:api/ApiPulseApi~apiPulseFormInputGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/pulse/form_input
     * Provides relevant configuration information and user choices for creating/updating Pulses.
     * @param {module:api/ApiPulseApi~apiPulseFormInputGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulseFormInputGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/form_input', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulseGet operation.
     * @callback module:api/ApiPulseApi~apiPulseGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/pulse/
     * Fetch all dashboard subscriptions. By default, returns only subscriptions for which the current user has write   permissions. For admins, this is all subscriptions; for non-admins, it is only subscriptions that they created.    If `dashboard_id` is specified, restricts results to subscriptions for that dashboard.    If `created_or_receive` is `true`, it specifically returns all subscriptions for which the current user   created *or* is a known recipient of. Note that this is a superset of the default items returned for non-admins,   and a subset of the default items returned for admins. This is used to power the /account/notifications page.   This may include subscriptions which the current user does not have collection permissions for, in which case   some sensitive metadata (the list of cards and recipients) is stripped out.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [archived = false)] 
     * @param {Number} [dashboardId] value must be an integer greater than zero.
     * @param {Boolean} [creatorOrRecipient = false)] 
     * @param {module:api/ApiPulseApi~apiPulseGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulseGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'archived': opts['archived'],
        'dashboard_id': opts['dashboardId'],
        'creator_or_recipient': opts['creatorOrRecipient']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulseIdGet operation.
     * @callback module:api/ApiPulseApi~apiPulseIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/pulse/{id}
     * Fetch `Pulse` with ID. If the user is a recipient of the Pulse but does not have read permissions for its collection,   we still return it but with some sensitive metadata removed.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPulseApi~apiPulseIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulseIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPulseIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulseIdPut operation.
     * @callback module:api/ApiPulseApi~apiPulseIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * PUT /api/pulse/{id}
     * Update a Pulse with `id`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPulseIdPutRequest} [apiPulseIdPutRequest] 
     * @param {module:api/ApiPulseApi~apiPulseIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulseIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPulseIdPutRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPulseIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulseIdSubscriptionDelete operation.
     * @callback module:api/ApiPulseApi~apiPulseIdSubscriptionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * DELETE /api/pulse/{id}/subscription
     * For users to unsubscribe themselves from a pulse subscription.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPulseApi~apiPulseIdSubscriptionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulseIdSubscriptionDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPulseIdSubscriptionDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/{id}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulsePost operation.
     * @callback module:api/ApiPulseApi~apiPulsePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/pulse/
     * Create a new `Pulse`.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPulsePostRequest} [apiPulsePostRequest] 
     * @param {module:api/ApiPulseApi~apiPulsePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulsePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPulsePostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulsePreviewCardIdGet operation.
     * @callback module:api/ApiPulseApi~apiPulsePreviewCardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/pulse/preview_card/{id}
     * Get HTML rendering of a Card with `id`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPulseApi~apiPulsePreviewCardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulsePreviewCardIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPulsePreviewCardIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/preview_card/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulsePreviewCardInfoIdGet operation.
     * @callback module:api/ApiPulseApi~apiPulsePreviewCardInfoIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/pulse/preview_card_info/{id}
     * Get JSON object containing HTML rendering of a Card with `id` and other information.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPulseApi~apiPulsePreviewCardInfoIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulsePreviewCardInfoIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPulsePreviewCardInfoIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/preview_card_info/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulsePreviewCardPngIdGet operation.
     * @callback module:api/ApiPulseApi~apiPulsePreviewCardPngIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/pulse/preview_card_png/{id}
     * Get PNG rendering of a Card with `id`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPulseApi~apiPulsePreviewCardPngIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulsePreviewCardPngIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPulsePreviewCardPngIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/preview_card_png/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulsePreviewDashboardIdGet operation.
     * @callback module:api/ApiPulseApi~apiPulsePreviewDashboardIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GET /api/pulse/preview_dashboard/{id}
     * Get HTML rendering of a Dashboard with `id`.    This endpoint relies on a custom middleware defined in `metabase.channel.render.core/style-tag-nonce-middleware` to   allow the style tag to render properly, given our Content Security Policy setup. This middleware is attached to these   routes at the bottom of this namespace using `metabase.api.common/define-routes`.
     * @param {Number} id value must be an integer greater than zero.
     * @param {module:api/ApiPulseApi~apiPulsePreviewDashboardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulsePreviewDashboardIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPulsePreviewDashboardIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/preview_dashboard/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPulseTestPost operation.
     * @callback module:api/ApiPulseApi~apiPulseTestPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * POST /api/pulse/test
     * Test send an unsaved pulse.
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiPulseTestPostRequest} [apiPulseTestPostRequest] 
     * @param {module:api/ApiPulseApi~apiPulseTestPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiPulseTestPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiPulseTestPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/pulse/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
