/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MetabaseUtilCronScheduleMap model module.
 * @module model/MetabaseUtilCronScheduleMap
 * @version v1.53.2-SNAPSHOT
 */
class MetabaseUtilCronScheduleMap {
    /**
     * Constructs a new <code>MetabaseUtilCronScheduleMap</code>.
     * value must be a valid schedule map. See schema in metabase.util.cron for details.
     * @alias module:model/MetabaseUtilCronScheduleMap
     * @param scheduleType {module:model/MetabaseUtilCronScheduleMap.ScheduleTypeEnum} 
     */
    constructor(scheduleType) { 
        
        MetabaseUtilCronScheduleMap.initialize(this, scheduleType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, scheduleType) { 
        obj['schedule_type'] = scheduleType;
    }

    /**
     * Constructs a <code>MetabaseUtilCronScheduleMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetabaseUtilCronScheduleMap} obj Optional instance to populate.
     * @return {module:model/MetabaseUtilCronScheduleMap} The populated <code>MetabaseUtilCronScheduleMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetabaseUtilCronScheduleMap();

            if (data.hasOwnProperty('schedule_day')) {
                obj['schedule_day'] = ApiClient.convertToType(data['schedule_day'], 'String');
            }
            if (data.hasOwnProperty('schedule_frame')) {
                obj['schedule_frame'] = ApiClient.convertToType(data['schedule_frame'], 'String');
            }
            if (data.hasOwnProperty('schedule_hour')) {
                obj['schedule_hour'] = ApiClient.convertToType(data['schedule_hour'], 'Number');
            }
            if (data.hasOwnProperty('schedule_minute')) {
                obj['schedule_minute'] = ApiClient.convertToType(data['schedule_minute'], 'Number');
            }
            if (data.hasOwnProperty('schedule_type')) {
                obj['schedule_type'] = ApiClient.convertToType(data['schedule_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetabaseUtilCronScheduleMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetabaseUtilCronScheduleMap</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetabaseUtilCronScheduleMap.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['schedule_day'] && !(typeof data['schedule_day'] === 'string' || data['schedule_day'] instanceof String)) {
            throw new Error("Expected the field `schedule_day` to be a primitive type in the JSON string but got " + data['schedule_day']);
        }
        // ensure the json data is a string
        if (data['schedule_frame'] && !(typeof data['schedule_frame'] === 'string' || data['schedule_frame'] instanceof String)) {
            throw new Error("Expected the field `schedule_frame` to be a primitive type in the JSON string but got " + data['schedule_frame']);
        }
        // ensure the json data is a string
        if (data['schedule_type'] && !(typeof data['schedule_type'] === 'string' || data['schedule_type'] instanceof String)) {
            throw new Error("Expected the field `schedule_type` to be a primitive type in the JSON string but got " + data['schedule_type']);
        }

        return true;
    }


}

MetabaseUtilCronScheduleMap.RequiredProperties = ["schedule_type"];

/**
 * @member {module:model/MetabaseUtilCronScheduleMap.ScheduleDayEnum} schedule_day
 */
MetabaseUtilCronScheduleMap.prototype['schedule_day'] = undefined;

/**
 * @member {module:model/MetabaseUtilCronScheduleMap.ScheduleFrameEnum} schedule_frame
 */
MetabaseUtilCronScheduleMap.prototype['schedule_frame'] = undefined;

/**
 * @member {Number} schedule_hour
 */
MetabaseUtilCronScheduleMap.prototype['schedule_hour'] = undefined;

/**
 * @member {Number} schedule_minute
 */
MetabaseUtilCronScheduleMap.prototype['schedule_minute'] = undefined;

/**
 * @member {module:model/MetabaseUtilCronScheduleMap.ScheduleTypeEnum} schedule_type
 */
MetabaseUtilCronScheduleMap.prototype['schedule_type'] = undefined;





/**
 * Allowed values for the <code>schedule_day</code> property.
 * @enum {String}
 * @readonly
 */
MetabaseUtilCronScheduleMap['ScheduleDayEnum'] = {

    /**
     * value: "sun"
     * @const
     */
    "sun": "sun",

    /**
     * value: "mon"
     * @const
     */
    "mon": "mon",

    /**
     * value: "tue"
     * @const
     */
    "tue": "tue",

    /**
     * value: "wed"
     * @const
     */
    "wed": "wed",

    /**
     * value: "thu"
     * @const
     */
    "thu": "thu",

    /**
     * value: "fri"
     * @const
     */
    "fri": "fri",

    /**
     * value: "sat"
     * @const
     */
    "sat": "sat"
};


/**
 * Allowed values for the <code>schedule_frame</code> property.
 * @enum {String}
 * @readonly
 */
MetabaseUtilCronScheduleMap['ScheduleFrameEnum'] = {

    /**
     * value: "first"
     * @const
     */
    "first": "first",

    /**
     * value: "mid"
     * @const
     */
    "mid": "mid",

    /**
     * value: "last"
     * @const
     */
    "last": "last"
};


/**
 * Allowed values for the <code>schedule_type</code> property.
 * @enum {String}
 * @readonly
 */
MetabaseUtilCronScheduleMap['ScheduleTypeEnum'] = {

    /**
     * value: "hourly"
     * @const
     */
    "hourly": "hourly",

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly"
};



export default MetabaseUtilCronScheduleMap;

