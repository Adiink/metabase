/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiCardPostRequestParameterMappingsInner from './ApiCardPostRequestParameterMappingsInner';
import ApiCardPostRequestParametersInner from './ApiCardPostRequestParametersInner';
import MetabaseAnalyzeQueryResultsResultColumnMetadata from './MetabaseAnalyzeQueryResultsResultColumnMetadata';
import MetabaseApiCardCardType from './MetabaseApiCardCardType';

/**
 * The ApiCardPostRequest model module.
 * @module model/ApiCardPostRequest
 * @version v1.53.2-SNAPSHOT
 */
class ApiCardPostRequest {
    /**
     * Constructs a new <code>ApiCardPostRequest</code>.
     * @alias module:model/ApiCardPostRequest
     * @param visualizationSettings {Object} Value must be a map.
     * @param datasetQuery {Object} Value must be a map.
     * @param name {String} 
     * @param display {String} 
     */
    constructor(visualizationSettings, datasetQuery, name, display) { 
        
        ApiCardPostRequest.initialize(this, visualizationSettings, datasetQuery, name, display);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, visualizationSettings, datasetQuery, name, display) { 
        obj['visualization_settings'] = visualizationSettings;
        obj['dataset_query'] = datasetQuery;
        obj['name'] = name;
        obj['display'] = display;
    }

    /**
     * Constructs a <code>ApiCardPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiCardPostRequest} obj Optional instance to populate.
     * @return {module:model/ApiCardPostRequest} The populated <code>ApiCardPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiCardPostRequest();

            if (data.hasOwnProperty('visualization_settings')) {
                obj['visualization_settings'] = ApiClient.convertToType(data['visualization_settings'], Object);
            }
            if (data.hasOwnProperty('dashboard_tab_id')) {
                obj['dashboard_tab_id'] = ApiClient.convertToType(data['dashboard_tab_id'], 'Number');
            }
            if (data.hasOwnProperty('entity_id')) {
                obj['entity_id'] = ApiClient.convertToType(data['entity_id'], 'String');
            }
            if (data.hasOwnProperty('dataset_query')) {
                obj['dataset_query'] = ApiClient.convertToType(data['dataset_query'], Object);
            }
            if (data.hasOwnProperty('parameter_mappings')) {
                obj['parameter_mappings'] = ApiClient.convertToType(data['parameter_mappings'], [ApiCardPostRequestParameterMappingsInner]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('collection_position')) {
                obj['collection_position'] = ApiClient.convertToType(data['collection_position'], 'Number');
            }
            if (data.hasOwnProperty('result_metadata')) {
                obj['result_metadata'] = ApiClient.convertToType(data['result_metadata'], [MetabaseAnalyzeQueryResultsResultColumnMetadata]);
            }
            if (data.hasOwnProperty('collection_id')) {
                obj['collection_id'] = ApiClient.convertToType(data['collection_id'], 'Number');
            }
            if (data.hasOwnProperty('cache_ttl')) {
                obj['cache_ttl'] = ApiClient.convertToType(data['cache_ttl'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = MetabaseApiCardCardType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('display')) {
                obj['display'] = ApiClient.convertToType(data['display'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ApiCardPostRequestParametersInner]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dashboard_id')) {
                obj['dashboard_id'] = ApiClient.convertToType(data['dashboard_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiCardPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiCardPostRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiCardPostRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['entity_id'] && !(typeof data['entity_id'] === 'string' || data['entity_id'] instanceof String)) {
            throw new Error("Expected the field `entity_id` to be a primitive type in the JSON string but got " + data['entity_id']);
        }
        if (data['parameter_mappings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameter_mappings'])) {
                throw new Error("Expected the field `parameter_mappings` to be an array in the JSON data but got " + data['parameter_mappings']);
            }
            // validate the optional field `parameter_mappings` (array)
            for (const item of data['parameter_mappings']) {
                ApiCardPostRequestParameterMappingsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['result_metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['result_metadata'])) {
                throw new Error("Expected the field `result_metadata` to be an array in the JSON data but got " + data['result_metadata']);
            }
            // validate the optional field `result_metadata` (array)
            for (const item of data['result_metadata']) {
                MetabaseAnalyzeQueryResultsResultColumnMetadata.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['display'] && !(typeof data['display'] === 'string' || data['display'] instanceof String)) {
            throw new Error("Expected the field `display` to be a primitive type in the JSON string but got " + data['display']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ApiCardPostRequestParametersInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

ApiCardPostRequest.RequiredProperties = ["visualization_settings", "dataset_query", "name", "display"];

/**
 * Value must be a map.
 * @member {Object} visualization_settings
 */
ApiCardPostRequest.prototype['visualization_settings'] = undefined;

/**
 * value must be an integer greater than zero.
 * @member {Number} dashboard_tab_id
 */
ApiCardPostRequest.prototype['dashboard_tab_id'] = undefined;

/**
 * @member {String} entity_id
 */
ApiCardPostRequest.prototype['entity_id'] = undefined;

/**
 * Value must be a map.
 * @member {Object} dataset_query
 */
ApiCardPostRequest.prototype['dataset_query'] = undefined;

/**
 * @member {Array.<module:model/ApiCardPostRequestParameterMappingsInner>} parameter_mappings
 */
ApiCardPostRequest.prototype['parameter_mappings'] = undefined;

/**
 * @member {String} name
 */
ApiCardPostRequest.prototype['name'] = undefined;

/**
 * value must be an integer greater than zero.
 * @member {Number} collection_position
 */
ApiCardPostRequest.prototype['collection_position'] = undefined;

/**
 * value must be an array of valid results column metadata maps.
 * @member {Array.<module:model/MetabaseAnalyzeQueryResultsResultColumnMetadata>} result_metadata
 */
ApiCardPostRequest.prototype['result_metadata'] = undefined;

/**
 * value must be an integer greater than zero.
 * @member {Number} collection_id
 */
ApiCardPostRequest.prototype['collection_id'] = undefined;

/**
 * value must be an integer greater than zero.
 * @member {Number} cache_ttl
 */
ApiCardPostRequest.prototype['cache_ttl'] = undefined;

/**
 * @member {module:model/MetabaseApiCardCardType} type
 */
ApiCardPostRequest.prototype['type'] = undefined;

/**
 * @member {String} display
 */
ApiCardPostRequest.prototype['display'] = undefined;

/**
 * @member {Array.<module:model/ApiCardPostRequestParametersInner>} parameters
 */
ApiCardPostRequest.prototype['parameters'] = undefined;

/**
 * @member {String} description
 */
ApiCardPostRequest.prototype['description'] = undefined;

/**
 * value must be an integer greater than zero.
 * @member {Number} dashboard_id
 */
ApiCardPostRequest.prototype['dashboard_id'] = undefined;






export default ApiCardPostRequest;

