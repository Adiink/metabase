/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetabaseLibSchemaMetadataColumnHasFieldValues from './MetabaseLibSchemaMetadataColumnHasFieldValues';

/**
 * The ApiFieldIdPutRequest model module.
 * @module model/ApiFieldIdPutRequest
 * @version v1.53.2-SNAPSHOT
 */
class ApiFieldIdPutRequest {
    /**
     * Constructs a new <code>ApiFieldIdPutRequest</code>.
     * @alias module:model/ApiFieldIdPutRequest
     */
    constructor() { 
        
        ApiFieldIdPutRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiFieldIdPutRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiFieldIdPutRequest} obj Optional instance to populate.
     * @return {module:model/ApiFieldIdPutRequest} The populated <code>ApiFieldIdPutRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiFieldIdPutRequest();

            if (data.hasOwnProperty('points_of_interest')) {
                obj['points_of_interest'] = ApiClient.convertToType(data['points_of_interest'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = ApiClient.convertToType(data['settings'], Object);
            }
            if (data.hasOwnProperty('visibility_type')) {
                obj['visibility_type'] = ApiClient.convertToType(data['visibility_type'], 'String');
            }
            if (data.hasOwnProperty('coercion_strategy')) {
                obj['coercion_strategy'] = ApiClient.convertToType(data['coercion_strategy'], Object);
            }
            if (data.hasOwnProperty('json_unfolding')) {
                obj['json_unfolding'] = ApiClient.convertToType(data['json_unfolding'], 'Boolean');
            }
            if (data.hasOwnProperty('semantic_type')) {
                obj['semantic_type'] = ApiClient.convertToType(data['semantic_type'], Object);
            }
            if (data.hasOwnProperty('has_field_values')) {
                obj['has_field_values'] = MetabaseLibSchemaMetadataColumnHasFieldValues.constructFromObject(data['has_field_values']);
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('nfc_path')) {
                obj['nfc_path'] = ApiClient.convertToType(data['nfc_path'], ['String']);
            }
            if (data.hasOwnProperty('caveats')) {
                obj['caveats'] = ApiClient.convertToType(data['caveats'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fk_target_field_id')) {
                obj['fk_target_field_id'] = ApiClient.convertToType(data['fk_target_field_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiFieldIdPutRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiFieldIdPutRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['points_of_interest'] && !(typeof data['points_of_interest'] === 'string' || data['points_of_interest'] instanceof String)) {
            throw new Error("Expected the field `points_of_interest` to be a primitive type in the JSON string but got " + data['points_of_interest']);
        }
        // ensure the json data is a string
        if (data['visibility_type'] && !(typeof data['visibility_type'] === 'string' || data['visibility_type'] instanceof String)) {
            throw new Error("Expected the field `visibility_type` to be a primitive type in the JSON string but got " + data['visibility_type']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nfc_path'])) {
            throw new Error("Expected the field `nfc_path` to be an array in the JSON data but got " + data['nfc_path']);
        }
        // ensure the json data is a string
        if (data['caveats'] && !(typeof data['caveats'] === 'string' || data['caveats'] instanceof String)) {
            throw new Error("Expected the field `caveats` to be a primitive type in the JSON string but got " + data['caveats']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}



/**
 * @member {String} points_of_interest
 */
ApiFieldIdPutRequest.prototype['points_of_interest'] = undefined;

/**
 * Value must be a map.
 * @member {Object} settings
 */
ApiFieldIdPutRequest.prototype['settings'] = undefined;

/**
 * @member {module:model/ApiFieldIdPutRequest.VisibilityTypeEnum} visibility_type
 */
ApiFieldIdPutRequest.prototype['visibility_type'] = undefined;

/**
 * @member {Object} coercion_strategy
 */
ApiFieldIdPutRequest.prototype['coercion_strategy'] = undefined;

/**
 * @member {Boolean} json_unfolding
 */
ApiFieldIdPutRequest.prototype['json_unfolding'] = undefined;

/**
 * @member {Object} semantic_type
 */
ApiFieldIdPutRequest.prototype['semantic_type'] = undefined;

/**
 * @member {module:model/MetabaseLibSchemaMetadataColumnHasFieldValues} has_field_values
 */
ApiFieldIdPutRequest.prototype['has_field_values'] = undefined;

/**
 * @member {String} display_name
 */
ApiFieldIdPutRequest.prototype['display_name'] = undefined;

/**
 * @member {Array.<String>} nfc_path
 */
ApiFieldIdPutRequest.prototype['nfc_path'] = undefined;

/**
 * @member {String} caveats
 */
ApiFieldIdPutRequest.prototype['caveats'] = undefined;

/**
 * @member {String} description
 */
ApiFieldIdPutRequest.prototype['description'] = undefined;

/**
 * value must be an integer greater than zero.
 * @member {Number} fk_target_field_id
 */
ApiFieldIdPutRequest.prototype['fk_target_field_id'] = undefined;





/**
 * Allowed values for the <code>visibility_type</code> property.
 * @enum {String}
 * @readonly
 */
ApiFieldIdPutRequest['VisibilityTypeEnum'] = {

    /**
     * value: "retired"
     * @const
     */
    "retired": "retired",

    /**
     * value: "sensitive"
     * @const
     */
    "sensitive": "sensitive",

    /**
     * value: "normal"
     * @const
     */
    "normal": "normal",

    /**
     * value: "hidden"
     * @const
     */
    "hidden": "hidden",

    /**
     * value: "details-only"
     * @const
     */
    "details-only": "details-only"
};



export default ApiFieldIdPutRequest;

