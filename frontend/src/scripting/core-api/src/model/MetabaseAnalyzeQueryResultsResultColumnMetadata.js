/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetabaseAnalyzeFingerprintSchemaFingerprint from './MetabaseAnalyzeFingerprintSchemaFingerprint';
import MetabaseAnalyzeQueryResultsResultColumnMetadataUnit from './MetabaseAnalyzeQueryResultsResultColumnMetadataUnit';
import MetabaseLibSchemaExpressionTemporalTimezoneId from './MetabaseLibSchemaExpressionTemporalTimezoneId';

/**
 * The MetabaseAnalyzeQueryResultsResultColumnMetadata model module.
 * @module model/MetabaseAnalyzeQueryResultsResultColumnMetadata
 * @version v1.53.2-SNAPSHOT
 */
class MetabaseAnalyzeQueryResultsResultColumnMetadata {
    /**
     * Constructs a new <code>MetabaseAnalyzeQueryResultsResultColumnMetadata</code>.
     * @alias module:model/MetabaseAnalyzeQueryResultsResultColumnMetadata
     * @param baseType {Object} 
     * @param name {String} 
     * @param displayName {String} 
     */
    constructor(baseType, name, displayName) { 
        
        MetabaseAnalyzeQueryResultsResultColumnMetadata.initialize(this, baseType, name, displayName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, baseType, name, displayName) { 
        obj['base_type'] = baseType;
        obj['name'] = name;
        obj['display_name'] = displayName;
    }

    /**
     * Constructs a <code>MetabaseAnalyzeQueryResultsResultColumnMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetabaseAnalyzeQueryResultsResultColumnMetadata} obj Optional instance to populate.
     * @return {module:model/MetabaseAnalyzeQueryResultsResultColumnMetadata} The populated <code>MetabaseAnalyzeQueryResultsResultColumnMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetabaseAnalyzeQueryResultsResultColumnMetadata();

            if (data.hasOwnProperty('field_ref')) {
                obj['field_ref'] = ApiClient.convertToType(data['field_ref'], Object);
            }
            if (data.hasOwnProperty('fingerprint')) {
                obj['fingerprint'] = MetabaseAnalyzeFingerprintSchemaFingerprint.constructFromObject(data['fingerprint']);
            }
            if (data.hasOwnProperty('base_type')) {
                obj['base_type'] = ApiClient.convertToType(data['base_type'], Object);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('semantic_type')) {
                obj['semantic_type'] = ApiClient.convertToType(data['semantic_type'], Object);
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('converted_timezone')) {
                obj['converted_timezone'] = MetabaseLibSchemaExpressionTemporalTimezoneId.constructFromObject(data['converted_timezone']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = MetabaseAnalyzeQueryResultsResultColumnMetadataUnit.constructFromObject(data['unit']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetabaseAnalyzeQueryResultsResultColumnMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetabaseAnalyzeQueryResultsResultColumnMetadata</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetabaseAnalyzeQueryResultsResultColumnMetadata.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `fingerprint`
        if (data['fingerprint']) { // data not null
          MetabaseAnalyzeFingerprintSchemaFingerprint.validateJSON(data['fingerprint']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // validate the optional field `converted_timezone`
        if (data['converted_timezone']) { // data not null
          MetabaseLibSchemaExpressionTemporalTimezoneId.validateJSON(data['converted_timezone']);
        }
        // validate the optional field `unit`
        if (data['unit']) { // data not null
          MetabaseAnalyzeQueryResultsResultColumnMetadataUnit.validateJSON(data['unit']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

MetabaseAnalyzeQueryResultsResultColumnMetadata.RequiredProperties = ["base_type", "name", "display_name"];

/**
 * @member {Object} field_ref
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['field_ref'] = undefined;

/**
 * @member {module:model/MetabaseAnalyzeFingerprintSchemaFingerprint} fingerprint
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['fingerprint'] = undefined;

/**
 * @member {Object} base_type
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['base_type'] = undefined;

/**
 * @member {Number} id
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['id'] = undefined;

/**
 * @member {String} name
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['name'] = undefined;

/**
 * @member {Object} semantic_type
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['semantic_type'] = undefined;

/**
 * @member {String} display_name
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['display_name'] = undefined;

/**
 * @member {module:model/MetabaseLibSchemaExpressionTemporalTimezoneId} converted_timezone
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['converted_timezone'] = undefined;

/**
 * @member {module:model/MetabaseAnalyzeQueryResultsResultColumnMetadataUnit} unit
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['unit'] = undefined;

/**
 * @member {String} description
 */
MetabaseAnalyzeQueryResultsResultColumnMetadata.prototype['description'] = undefined;






export default MetabaseAnalyzeQueryResultsResultColumnMetadata;

