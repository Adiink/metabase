/**
 * Metabase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.53.2-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MetabaseApi);
  }
}(this, function(expect, MetabaseApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MetabaseApi.ApiAutomagicDashboardsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ApiAutomagicDashboardsApi', function() {
    describe('apiAutomagicDashboardsDatabaseIdCandidatesGet', function() {
      it('should call apiAutomagicDashboardsDatabaseIdCandidatesGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsDatabaseIdCandidatesGet
        //instance.apiAutomagicDashboardsDatabaseIdCandidatesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryCompareComparisonEntityComparisonEntityIdOrQueryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryCellCellQueryRulePrefixDashboardTemplateGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryCompareComparisonEntityComparisonEntityIdOrQueryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryQueryMetadataGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateCompareComparisonEntityComparisonEntityIdOrQueryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet', function() {
      it('should call apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet
        //instance.apiAutomagicDashboardsEntityEntityIdOrQueryRulePrefixDashboardTemplateGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet', function() {
      it('should call apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet successfully', function(done) {
        //uncomment below and update the code to test apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet
        //instance.apiAutomagicDashboardsModelIndexModelIndexIdPrimaryKeyPkIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
